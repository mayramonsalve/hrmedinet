#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MedinetClassLibrary.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="HRMEDINET_SITE")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertRegion(Region instance);
    partial void UpdateRegion(Region instance);
    partial void DeleteRegion(Region instance);
    partial void InsertQuestionsType(QuestionsType instance);
    partial void UpdateQuestionsType(QuestionsType instance);
    partial void DeleteQuestionsType(QuestionsType instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertTextAnswer(TextAnswer instance);
    partial void UpdateTextAnswer(TextAnswer instance);
    partial void DeleteTextAnswer(TextAnswer instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertLocation(Location instance);
    partial void UpdateLocation(Location instance);
    partial void DeleteLocation(Location instance);
    partial void InsertSelectionAnswer(SelectionAnswer instance);
    partial void UpdateSelectionAnswer(SelectionAnswer instance);
    partial void DeleteSelectionAnswer(SelectionAnswer instance);
    partial void InsertGraphic(Graphic instance);
    partial void UpdateGraphic(Graphic instance);
    partial void DeleteGraphic(Graphic instance);
    partial void InsertGraphicDetail(GraphicDetail instance);
    partial void UpdateGraphicDetail(GraphicDetail instance);
    partial void DeleteGraphicDetail(GraphicDetail instance);
    partial void InsertChiSquareDistribution(ChiSquareDistribution instance);
    partial void UpdateChiSquareDistribution(ChiSquareDistribution instance);
    partial void DeleteChiSquareDistribution(ChiSquareDistribution instance);
    partial void InsertDegreesOfFreedom(DegreesOfFreedom instance);
    partial void UpdateDegreesOfFreedom(DegreesOfFreedom instance);
    partial void DeleteDegreesOfFreedom(DegreesOfFreedom instance);
    partial void InsertSignificanceLevel(SignificanceLevel instance);
    partial void UpdateSignificanceLevel(SignificanceLevel instance);
    partial void DeleteSignificanceLevel(SignificanceLevel instance);
    partial void InsertCompaniesType(CompaniesType instance);
    partial void UpdateCompaniesType(CompaniesType instance);
    partial void DeleteCompaniesType(CompaniesType instance);
    partial void InsertEvaluationFO(EvaluationFO instance);
    partial void UpdateEvaluationFO(EvaluationFO instance);
    partial void DeleteEvaluationFO(EvaluationFO instance);
    partial void InsertQuestionnaire(Questionnaire instance);
    partial void UpdateQuestionnaire(Questionnaire instance);
    partial void DeleteQuestionnaire(Questionnaire instance);
    partial void InsertCompanySector(CompanySector instance);
    partial void UpdateCompanySector(CompanySector instance);
    partial void DeleteCompanySector(CompanySector instance);
    partial void InsertStandardError(StandardError instance);
    partial void UpdateStandardError(StandardError instance);
    partial void DeleteStandardError(StandardError instance);
    partial void InsertConfidenceLevel(ConfidenceLevel instance);
    partial void UpdateConfidenceLevel(ConfidenceLevel instance);
    partial void DeleteConfidenceLevel(ConfidenceLevel instance);
    partial void InsertFeature(Feature instance);
    partial void UpdateFeature(Feature instance);
    partial void DeleteFeature(Feature instance);
    partial void InsertScore(Score instance);
    partial void UpdateScore(Score instance);
    partial void DeleteScore(Score instance);
    partial void InsertFeedbackType(FeedbackType instance);
    partial void UpdateFeedbackType(FeedbackType instance);
    partial void DeleteFeedbackType(FeedbackType instance);
    partial void InsertFeedback(Feedback instance);
    partial void UpdateFeedback(Feedback instance);
    partial void DeleteFeedback(Feedback instance);
    partial void InsertFunctionalOrganizationType(FunctionalOrganizationType instance);
    partial void UpdateFunctionalOrganizationType(FunctionalOrganizationType instance);
    partial void DeleteFunctionalOrganizationType(FunctionalOrganizationType instance);
    partial void InsertPositionLevel(PositionLevel instance);
    partial void UpdatePositionLevel(PositionLevel instance);
    partial void DeletePositionLevel(PositionLevel instance);
    partial void InsertState(State instance);
    partial void UpdateState(State instance);
    partial void DeleteState(State instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertCompany(Company instance);
    partial void UpdateCompany(Company instance);
    partial void DeleteCompany(Company instance);
    partial void InsertDemo(Demo instance);
    partial void UpdateDemo(Demo instance);
    partial void DeleteDemo(Demo instance);
    partial void InsertSeniority(Seniority instance);
    partial void UpdateSeniority(Seniority instance);
    partial void DeleteSeniority(Seniority instance);
    partial void InsertPerformanceEvaluation(PerformanceEvaluation instance);
    partial void UpdatePerformanceEvaluation(PerformanceEvaluation instance);
    partial void DeletePerformanceEvaluation(PerformanceEvaluation instance);
    partial void InsertInstructionLevel(InstructionLevel instance);
    partial void UpdateInstructionLevel(InstructionLevel instance);
    partial void DeleteInstructionLevel(InstructionLevel instance);
    partial void InsertAge(Age instance);
    partial void UpdateAge(Age instance);
    partial void DeleteAge(Age instance);
    partial void InsertContactUs(ContactUs instance);
    partial void UpdateContactUs(ContactUs instance);
    partial void DeleteContactUs(ContactUs instance);
    partial void InsertClimateRange(ClimateRange instance);
    partial void UpdateClimateRange(ClimateRange instance);
    partial void DeleteClimateRange(ClimateRange instance);
    partial void InsertClimateScale(ClimateScale instance);
    partial void UpdateClimateScale(ClimateScale instance);
    partial void DeleteClimateScale(ClimateScale instance);
    partial void InsertDichotomousAnswer(DichotomousAnswer instance);
    partial void UpdateDichotomousAnswer(DichotomousAnswer instance);
    partial void DeleteDichotomousAnswer(DichotomousAnswer instance);
    partial void InsertDemographicSelectorDetail(DemographicSelectorDetail instance);
    partial void UpdateDemographicSelectorDetail(DemographicSelectorDetail instance);
    partial void DeleteDemographicSelectorDetail(DemographicSelectorDetail instance);
    partial void InsertWeighing(Weighing instance);
    partial void UpdateWeighing(Weighing instance);
    partial void DeleteWeighing(Weighing instance);
    partial void InsertEvaluation(Evaluation instance);
    partial void UpdateEvaluation(Evaluation instance);
    partial void DeleteEvaluation(Evaluation instance);
    partial void InsertFunctionalOrganization(FunctionalOrganization instance);
    partial void UpdateFunctionalOrganization(FunctionalOrganization instance);
    partial void DeleteFunctionalOrganization(FunctionalOrganization instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertTicket(Ticket instance);
    partial void UpdateTicket(Ticket instance);
    partial void DeleteTicket(Ticket instance);
    partial void InsertOptionBySelectionAnswer(OptionBySelectionAnswer instance);
    partial void UpdateOptionBySelectionAnswer(OptionBySelectionAnswer instance);
    partial void DeleteOptionBySelectionAnswer(OptionBySelectionAnswer instance);
    partial void InsertQuestionTypeByQuestion(QuestionTypeByQuestion instance);
    partial void UpdateQuestionTypeByQuestion(QuestionTypeByQuestion instance);
    partial void DeleteQuestionTypeByQuestion(QuestionTypeByQuestion instance);
    partial void InsertOption(Option instance);
    partial void UpdateOption(Option instance);
    partial void DeleteOption(Option instance);
    partial void InsertQuestion(Question instance);
    partial void UpdateQuestion(Question instance);
    partial void DeleteQuestion(Question instance);
    partial void InsertDemographicsInTest(DemographicsInTest instance);
    partial void UpdateDemographicsInTest(DemographicsInTest instance);
    partial void DeleteDemographicsInTest(DemographicsInTest instance);
    partial void InsertDemographic(Demographic instance);
    partial void UpdateDemographic(Demographic instance);
    partial void DeleteDemographic(Demographic instance);
    partial void InsertER_AnswersByFOType(ER_AnswersByFOType instance);
    partial void UpdateER_AnswersByFOType(ER_AnswersByFOType instance);
    partial void DeleteER_AnswersByFOType(ER_AnswersByFOType instance);
    partial void InsertER_StepwiseValue(ER_StepwiseValue instance);
    partial void UpdateER_StepwiseValue(ER_StepwiseValue instance);
    partial void DeleteER_StepwiseValue(ER_StepwiseValue instance);
    partial void InsertER_AnswersByPositionLevel(ER_AnswersByPositionLevel instance);
    partial void UpdateER_AnswersByPositionLevel(ER_AnswersByPositionLevel instance);
    partial void DeleteER_AnswersByPositionLevel(ER_AnswersByPositionLevel instance);
    partial void InsertER_CategoriesSatEmployee(ER_CategoriesSatEmployee instance);
    partial void UpdateER_CategoriesSatEmployee(ER_CategoriesSatEmployee instance);
    partial void DeleteER_CategoriesSatEmployee(ER_CategoriesSatEmployee instance);
    partial void InsertER_ClimateByBranch(ER_ClimateByBranch instance);
    partial void UpdateER_ClimateByBranch(ER_ClimateByBranch instance);
    partial void DeleteER_ClimateByBranch(ER_ClimateByBranch instance);
    partial void InsertER_ClimateByCategory(ER_ClimateByCategory instance);
    partial void UpdateER_ClimateByCategory(ER_ClimateByCategory instance);
    partial void DeleteER_ClimateByCategory(ER_ClimateByCategory instance);
    partial void InsertER_GeneralSatEmployee(ER_GeneralSatEmployee instance);
    partial void UpdateER_GeneralSatEmployee(ER_GeneralSatEmployee instance);
    partial void DeleteER_GeneralSatEmployee(ER_GeneralSatEmployee instance);
    partial void InsertER_LocationsSatEmployee(ER_LocationsSatEmployee instance);
    partial void UpdateER_LocationsSatEmployee(ER_LocationsSatEmployee instance);
    partial void DeleteER_LocationsSatEmployee(ER_LocationsSatEmployee instance);
    partial void InsertTest(Test instance);
    partial void UpdateTest(Test instance);
    partial void DeleteTest(Test instance);
    partial void InsertExecutiveReport(ExecutiveReport instance);
    partial void UpdateExecutiveReport(ExecutiveReport instance);
    partial void DeleteExecutiveReport(ExecutiveReport instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::MedinetClassLibrary.Properties.Settings.Default.HRMEDINET_SITEConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Region> Region
		{
			get
			{
				return this.GetTable<Region>();
			}
		}
		
		public System.Data.Linq.Table<QuestionsType> QuestionsTypes
		{
			get
			{
				return this.GetTable<QuestionsType>();
			}
		}
		
		public System.Data.Linq.Table<Role> Role
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<TextAnswer> TextAnswers
		{
			get
			{
				return this.GetTable<TextAnswer>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Location> Locations
		{
			get
			{
				return this.GetTable<Location>();
			}
		}
		
		public System.Data.Linq.Table<SelectionAnswer> SelectionAnswers
		{
			get
			{
				return this.GetTable<SelectionAnswer>();
			}
		}
		
		public System.Data.Linq.Table<Graphic> Graphics
		{
			get
			{
				return this.GetTable<Graphic>();
			}
		}
		
		public System.Data.Linq.Table<GraphicDetail> GraphicDetails
		{
			get
			{
				return this.GetTable<GraphicDetail>();
			}
		}
		
		public System.Data.Linq.Table<ChiSquareDistribution> ChiSquareDistributions
		{
			get
			{
				return this.GetTable<ChiSquareDistribution>();
			}
		}
		
		public System.Data.Linq.Table<DegreesOfFreedom> DegreesOfFreedoms
		{
			get
			{
				return this.GetTable<DegreesOfFreedom>();
			}
		}
		
		public System.Data.Linq.Table<SignificanceLevel> SignificanceLevels
		{
			get
			{
				return this.GetTable<SignificanceLevel>();
			}
		}
		
		public System.Data.Linq.Table<CompaniesType> CompaniesTypes
		{
			get
			{
				return this.GetTable<CompaniesType>();
			}
		}
		
		public System.Data.Linq.Table<EvaluationFO> EvaluationFOs
		{
			get
			{
				return this.GetTable<EvaluationFO>();
			}
		}
		
		public System.Data.Linq.Table<Questionnaire> Questionnaires
		{
			get
			{
				return this.GetTable<Questionnaire>();
			}
		}
		
		public System.Data.Linq.Table<CompanySector> CompanySectors
		{
			get
			{
				return this.GetTable<CompanySector>();
			}
		}
		
		public System.Data.Linq.Table<StandardError> StandardErrors
		{
			get
			{
				return this.GetTable<StandardError>();
			}
		}
		
		public System.Data.Linq.Table<ConfidenceLevel> ConfidenceLevels
		{
			get
			{
				return this.GetTable<ConfidenceLevel>();
			}
		}
		
		public System.Data.Linq.Table<Feature> Features
		{
			get
			{
				return this.GetTable<Feature>();
			}
		}
		
		public System.Data.Linq.Table<Score> Scores
		{
			get
			{
				return this.GetTable<Score>();
			}
		}
		
		public System.Data.Linq.Table<FeedbackType> FeedbackTypes
		{
			get
			{
				return this.GetTable<FeedbackType>();
			}
		}
		
		public System.Data.Linq.Table<Feedback> Feedbacks
		{
			get
			{
				return this.GetTable<Feedback>();
			}
		}
		
		public System.Data.Linq.Table<FunctionalOrganizationType> FunctionalOrganizationTypes
		{
			get
			{
				return this.GetTable<FunctionalOrganizationType>();
			}
		}
		
		public System.Data.Linq.Table<PositionLevel> PositionLevels
		{
			get
			{
				return this.GetTable<PositionLevel>();
			}
		}
		
		public System.Data.Linq.Table<State> States
		{
			get
			{
				return this.GetTable<State>();
			}
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<Company> Companies
		{
			get
			{
				return this.GetTable<Company>();
			}
		}
		
		public System.Data.Linq.Table<Demo> Demos
		{
			get
			{
				return this.GetTable<Demo>();
			}
		}
		
		public System.Data.Linq.Table<Seniority> Seniorities
		{
			get
			{
				return this.GetTable<Seniority>();
			}
		}
		
		public System.Data.Linq.Table<PerformanceEvaluation> PerformanceEvaluations
		{
			get
			{
				return this.GetTable<PerformanceEvaluation>();
			}
		}
		
		public System.Data.Linq.Table<InstructionLevel> InstructionLevels
		{
			get
			{
				return this.GetTable<InstructionLevel>();
			}
		}
		
		public System.Data.Linq.Table<Age> Ages
		{
			get
			{
				return this.GetTable<Age>();
			}
		}
		
		public System.Data.Linq.Table<ContactUs> ContactUs
		{
			get
			{
				return this.GetTable<ContactUs>();
			}
		}
		
		public System.Data.Linq.Table<ClimateRange> ClimateRanges
		{
			get
			{
				return this.GetTable<ClimateRange>();
			}
		}
		
		public System.Data.Linq.Table<ClimateScale> ClimateScales
		{
			get
			{
				return this.GetTable<ClimateScale>();
			}
		}
		
		public System.Data.Linq.Table<DichotomousAnswer> DichotomousAnswers
		{
			get
			{
				return this.GetTable<DichotomousAnswer>();
			}
		}
		
		public System.Data.Linq.Table<DemographicSelectorDetail> DemographicSelectorDetails
		{
			get
			{
				return this.GetTable<DemographicSelectorDetail>();
			}
		}
		
		public System.Data.Linq.Table<Weighing> Weighings
		{
			get
			{
				return this.GetTable<Weighing>();
			}
		}
		
		public System.Data.Linq.Table<Evaluation> Evaluations
		{
			get
			{
				return this.GetTable<Evaluation>();
			}
		}
		
		public System.Data.Linq.Table<FunctionalOrganization> FunctionalOrganizations
		{
			get
			{
				return this.GetTable<FunctionalOrganization>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Ticket> Tickets
		{
			get
			{
				return this.GetTable<Ticket>();
			}
		}
		
		public System.Data.Linq.Table<OptionBySelectionAnswer> OptionBySelectionAnswers
		{
			get
			{
				return this.GetTable<OptionBySelectionAnswer>();
			}
		}
		
		public System.Data.Linq.Table<QuestionTypeByQuestion> QuestionTypeByQuestions
		{
			get
			{
				return this.GetTable<QuestionTypeByQuestion>();
			}
		}
		
		public System.Data.Linq.Table<Option> Options
		{
			get
			{
				return this.GetTable<Option>();
			}
		}
		
		public System.Data.Linq.Table<Question> Questions
		{
			get
			{
				return this.GetTable<Question>();
			}
		}
		
		public System.Data.Linq.Table<DemographicsInTest> DemographicsInTests
		{
			get
			{
				return this.GetTable<DemographicsInTest>();
			}
		}
		
		public System.Data.Linq.Table<Demographic> Demographics
		{
			get
			{
				return this.GetTable<Demographic>();
			}
		}
		
		public System.Data.Linq.Table<ER_AnswersByFOType> ER_AnswersByFOTypes
		{
			get
			{
				return this.GetTable<ER_AnswersByFOType>();
			}
		}
		
		public System.Data.Linq.Table<ER_StepwiseValue> ER_StepwiseValues
		{
			get
			{
				return this.GetTable<ER_StepwiseValue>();
			}
		}
		
		public System.Data.Linq.Table<ER_AnswersByPositionLevel> ER_AnswersByPositionLevels
		{
			get
			{
				return this.GetTable<ER_AnswersByPositionLevel>();
			}
		}
		
		public System.Data.Linq.Table<ER_CategoriesSatEmployee> ER_CategoriesSatEmployees
		{
			get
			{
				return this.GetTable<ER_CategoriesSatEmployee>();
			}
		}
		
		public System.Data.Linq.Table<ER_ClimateByBranch> ER_ClimateByBranches
		{
			get
			{
				return this.GetTable<ER_ClimateByBranch>();
			}
		}
		
		public System.Data.Linq.Table<ER_ClimateByCategory> ER_ClimateByCategories
		{
			get
			{
				return this.GetTable<ER_ClimateByCategory>();
			}
		}
		
		public System.Data.Linq.Table<ER_GeneralSatEmployee> ER_GeneralSatEmployees
		{
			get
			{
				return this.GetTable<ER_GeneralSatEmployee>();
			}
		}
		
		public System.Data.Linq.Table<ER_LocationsSatEmployee> ER_LocationsSatEmployees
		{
			get
			{
				return this.GetTable<ER_LocationsSatEmployee>();
			}
		}
		
		public System.Data.Linq.Table<Test> Tests
		{
			get
			{
				return this.GetTable<Test>();
			}
		}
		
		public System.Data.Linq.Table<ExecutiveReport> ExecutiveReports
		{
			get
			{
				return this.GetTable<ExecutiveReport>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Regions")]
	public partial class Region : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _Company_Id;
		
		private EntitySet<Location> _Locations;
		
		private EntitySet<ExecutiveReport> _ExecutiveReports;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCompany_IdChanging(int value);
    partial void OnCompany_IdChanged();
    #endregion
		
		public Region()
		{
			this._Locations = new EntitySet<Location>(new Action<Location>(this.attach_Locations), new Action<Location>(this.detach_Locations));
			this._ExecutiveReports = new EntitySet<ExecutiveReport>(new Action<ExecutiveReport>(this.attach_ExecutiveReports), new Action<ExecutiveReport>(this.detach_ExecutiveReports));
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Company_Id", DbType="Int NOT NULL")]
		public int Company_Id
		{
			get
			{
				return this._Company_Id;
			}
			set
			{
				if ((this._Company_Id != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompany_IdChanging(value);
					this.SendPropertyChanging();
					this._Company_Id = value;
					this.SendPropertyChanged("Company_Id");
					this.OnCompany_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_Location", Storage="_Locations", ThisKey="Id", OtherKey="Region_Id")]
		public EntitySet<Location> Locations
		{
			get
			{
				return this._Locations;
			}
			set
			{
				this._Locations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_ExecutiveReport", Storage="_ExecutiveReports", ThisKey="Id", OtherKey="Region_Id")]
		public EntitySet<ExecutiveReport> ExecutiveReports
		{
			get
			{
				return this._ExecutiveReports;
			}
			set
			{
				this._ExecutiveReports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Region", Storage="_Company", ThisKey="Company_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Regions.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Regions.Add(this);
						this._Company_Id = value.Id;
					}
					else
					{
						this._Company_Id = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Locations(Location entity)
		{
			this.SendPropertyChanging();
			entity.Region = this;
		}
		
		private void detach_Locations(Location entity)
		{
			this.SendPropertyChanging();
			entity.Region = null;
		}
		
		private void attach_ExecutiveReports(ExecutiveReport entity)
		{
			this.SendPropertyChanging();
			entity.Region = this;
		}
		
		private void detach_ExecutiveReports(ExecutiveReport entity)
		{
			this.SendPropertyChanging();
			entity.Region = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QuestionsTypes")]
	public partial class QuestionsType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<QuestionTypeByQuestion> _QuestionTypeByQuestions;
		
		private EntitySet<Question> _Questions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public QuestionsType()
		{
			this._QuestionTypeByQuestions = new EntitySet<QuestionTypeByQuestion>(new Action<QuestionTypeByQuestion>(this.attach_QuestionTypeByQuestions), new Action<QuestionTypeByQuestion>(this.detach_QuestionTypeByQuestions));
			this._Questions = new EntitySet<Question>(new Action<Question>(this.attach_Questions), new Action<Question>(this.detach_Questions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuestionsType_QuestionTypeByQuestion", Storage="_QuestionTypeByQuestions", ThisKey="Id", OtherKey="QuestionType_Id")]
		public EntitySet<QuestionTypeByQuestion> QuestionTypeByQuestions
		{
			get
			{
				return this._QuestionTypeByQuestions;
			}
			set
			{
				this._QuestionTypeByQuestions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuestionsType_Question", Storage="_Questions", ThisKey="Id", OtherKey="QuestionType_Id")]
		public EntitySet<Question> Questions
		{
			get
			{
				return this._Questions;
			}
			set
			{
				this._Questions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_QuestionTypeByQuestions(QuestionTypeByQuestion entity)
		{
			this.SendPropertyChanging();
			entity.QuestionsType = this;
		}
		
		private void detach_QuestionTypeByQuestions(QuestionTypeByQuestion entity)
		{
			this.SendPropertyChanging();
			entity.QuestionsType = null;
		}
		
		private void attach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.QuestionsType = this;
		}
		
		private void detach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.QuestionsType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Roles")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<User> _Users;
		
		private EntitySet<ExecutiveReport> _ExecutiveReports;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Role()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._ExecutiveReports = new EntitySet<ExecutiveReport>(new Action<ExecutiveReport>(this.attach_ExecutiveReports), new Action<ExecutiveReport>(this.detach_ExecutiveReports));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User", Storage="_Users", ThisKey="Id", OtherKey="Role_Id")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_ExecutiveReport", Storage="_ExecutiveReports", ThisKey="Id", OtherKey="Role_Id")]
		public EntitySet<ExecutiveReport> ExecutiveReports
		{
			get
			{
				return this._ExecutiveReports;
			}
			set
			{
				this._ExecutiveReports.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
		
		private void attach_ExecutiveReports(ExecutiveReport entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_ExecutiveReports(ExecutiveReport entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TextAnswers")]
	public partial class TextAnswer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Text;
		
		private System.DateTime _CreationDate;
		
		private int _Question_Id;
		
		private int _Evaluation_Id;
		
		private EntityRef<Evaluation> _Evaluation;
		
		private EntityRef<Question> _Question;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnQuestion_IdChanging(int value);
    partial void OnQuestion_IdChanged();
    partial void OnEvaluation_IdChanging(int value);
    partial void OnEvaluation_IdChanged();
    #endregion
		
		public TextAnswer()
		{
			this._Evaluation = default(EntityRef<Evaluation>);
			this._Question = default(EntityRef<Question>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Question_Id", DbType="Int NOT NULL")]
		public int Question_Id
		{
			get
			{
				return this._Question_Id;
			}
			set
			{
				if ((this._Question_Id != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestion_IdChanging(value);
					this.SendPropertyChanging();
					this._Question_Id = value;
					this.SendPropertyChanged("Question_Id");
					this.OnQuestion_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Evaluation_Id", DbType="Int NOT NULL")]
		public int Evaluation_Id
		{
			get
			{
				return this._Evaluation_Id;
			}
			set
			{
				if ((this._Evaluation_Id != value))
				{
					if (this._Evaluation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEvaluation_IdChanging(value);
					this.SendPropertyChanging();
					this._Evaluation_Id = value;
					this.SendPropertyChanged("Evaluation_Id");
					this.OnEvaluation_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Evaluation_TextAnswer", Storage="_Evaluation", ThisKey="Evaluation_Id", OtherKey="Id", IsForeignKey=true)]
		public Evaluation Evaluation
		{
			get
			{
				return this._Evaluation.Entity;
			}
			set
			{
				Evaluation previousValue = this._Evaluation.Entity;
				if (((previousValue != value) 
							|| (this._Evaluation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Evaluation.Entity = null;
						previousValue.TextAnswers.Remove(this);
					}
					this._Evaluation.Entity = value;
					if ((value != null))
					{
						value.TextAnswers.Add(this);
						this._Evaluation_Id = value.Id;
					}
					else
					{
						this._Evaluation_Id = default(int);
					}
					this.SendPropertyChanged("Evaluation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_TextAnswer", Storage="_Question", ThisKey="Question_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.TextAnswers.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.TextAnswers.Add(this);
						this._Question_Id = value.Id;
					}
					else
					{
						this._Question_Id = default(int);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _UserName;
		
		private string _Password;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Email;
		
		private string _Image;
		
		private string _ContactPhone;
		
		private string _Address;
		
		private string _IdNumber;
		
		private int _Company_Id;
		
		private System.Nullable<int> _Location_Id;
		
		private int _Role_Id;
		
		private System.DateTime _CreationDate;
		
		private System.DateTime _LastLoginDate;
		
		private System.DateTime _LastLogoutDate;
		
		private System.DateTime _LastPasswordChangedDate;
		
		private System.DateTime _LastLockOutDate;
		
		private bool _IsApproved;
		
		private bool _IsLockedOut;
		
		private bool _IsOnline;
		
		private int _FailedLoginAttemptsCounter;
		
		private EntitySet<GraphicDetail> _GraphicDetails;
		
		private EntitySet<Questionnaire> _Questionnaires;
		
		private EntitySet<Feedback> _Feedbacks;
		
		private EntitySet<Test> _Tests;
		
		private EntityRef<Role> _Role;
		
		private EntityRef<Location> _Location;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    partial void OnContactPhoneChanging(string value);
    partial void OnContactPhoneChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnIdNumberChanging(string value);
    partial void OnIdNumberChanged();
    partial void OnCompany_IdChanging(int value);
    partial void OnCompany_IdChanged();
    partial void OnLocation_IdChanging(System.Nullable<int> value);
    partial void OnLocation_IdChanged();
    partial void OnRole_IdChanging(int value);
    partial void OnRole_IdChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnLastLoginDateChanging(System.DateTime value);
    partial void OnLastLoginDateChanged();
    partial void OnLastLogoutDateChanging(System.DateTime value);
    partial void OnLastLogoutDateChanged();
    partial void OnLastPasswordChangedDateChanging(System.DateTime value);
    partial void OnLastPasswordChangedDateChanged();
    partial void OnLastLockOutDateChanging(System.DateTime value);
    partial void OnLastLockOutDateChanged();
    partial void OnIsApprovedChanging(bool value);
    partial void OnIsApprovedChanged();
    partial void OnIsLockedOutChanging(bool value);
    partial void OnIsLockedOutChanged();
    partial void OnIsOnlineChanging(bool value);
    partial void OnIsOnlineChanged();
    partial void OnFailedLoginAttemptsCounterChanging(int value);
    partial void OnFailedLoginAttemptsCounterChanged();
    #endregion
		
		public User()
		{
			this._GraphicDetails = new EntitySet<GraphicDetail>(new Action<GraphicDetail>(this.attach_GraphicDetails), new Action<GraphicDetail>(this.detach_GraphicDetails));
			this._Questionnaires = new EntitySet<Questionnaire>(new Action<Questionnaire>(this.attach_Questionnaires), new Action<Questionnaire>(this.detach_Questionnaires));
			this._Feedbacks = new EntitySet<Feedback>(new Action<Feedback>(this.attach_Feedbacks), new Action<Feedback>(this.detach_Feedbacks));
			this._Tests = new EntitySet<Test>(new Action<Test>(this.attach_Tests), new Action<Test>(this.detach_Tests));
			this._Role = default(EntityRef<Role>);
			this._Location = default(EntityRef<Location>);
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="VarChar(50)")]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactPhone", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string ContactPhone
		{
			get
			{
				return this._ContactPhone;
			}
			set
			{
				if ((this._ContactPhone != value))
				{
					this.OnContactPhoneChanging(value);
					this.SendPropertyChanging();
					this._ContactPhone = value;
					this.SendPropertyChanged("ContactPhone");
					this.OnContactPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdNumber", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string IdNumber
		{
			get
			{
				return this._IdNumber;
			}
			set
			{
				if ((this._IdNumber != value))
				{
					this.OnIdNumberChanging(value);
					this.SendPropertyChanging();
					this._IdNumber = value;
					this.SendPropertyChanged("IdNumber");
					this.OnIdNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Company_Id", DbType="Int NOT NULL")]
		public int Company_Id
		{
			get
			{
				return this._Company_Id;
			}
			set
			{
				if ((this._Company_Id != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompany_IdChanging(value);
					this.SendPropertyChanging();
					this._Company_Id = value;
					this.SendPropertyChanged("Company_Id");
					this.OnCompany_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location_Id", DbType="Int")]
		public System.Nullable<int> Location_Id
		{
			get
			{
				return this._Location_Id;
			}
			set
			{
				if ((this._Location_Id != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocation_IdChanging(value);
					this.SendPropertyChanging();
					this._Location_Id = value;
					this.SendPropertyChanged("Location_Id");
					this.OnLocation_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role_Id", DbType="Int NOT NULL")]
		public int Role_Id
		{
			get
			{
				return this._Role_Id;
			}
			set
			{
				if ((this._Role_Id != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRole_IdChanging(value);
					this.SendPropertyChanging();
					this._Role_Id = value;
					this.SendPropertyChanged("Role_Id");
					this.OnRole_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLoginDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastLoginDate
		{
			get
			{
				return this._LastLoginDate;
			}
			set
			{
				if ((this._LastLoginDate != value))
				{
					this.OnLastLoginDateChanging(value);
					this.SendPropertyChanging();
					this._LastLoginDate = value;
					this.SendPropertyChanged("LastLoginDate");
					this.OnLastLoginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLogoutDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastLogoutDate
		{
			get
			{
				return this._LastLogoutDate;
			}
			set
			{
				if ((this._LastLogoutDate != value))
				{
					this.OnLastLogoutDateChanging(value);
					this.SendPropertyChanging();
					this._LastLogoutDate = value;
					this.SendPropertyChanged("LastLogoutDate");
					this.OnLastLogoutDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastPasswordChangedDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastPasswordChangedDate
		{
			get
			{
				return this._LastPasswordChangedDate;
			}
			set
			{
				if ((this._LastPasswordChangedDate != value))
				{
					this.OnLastPasswordChangedDateChanging(value);
					this.SendPropertyChanging();
					this._LastPasswordChangedDate = value;
					this.SendPropertyChanged("LastPasswordChangedDate");
					this.OnLastPasswordChangedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLockOutDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastLockOutDate
		{
			get
			{
				return this._LastLockOutDate;
			}
			set
			{
				if ((this._LastLockOutDate != value))
				{
					this.OnLastLockOutDateChanging(value);
					this.SendPropertyChanging();
					this._LastLockOutDate = value;
					this.SendPropertyChanged("LastLockOutDate");
					this.OnLastLockOutDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsApproved", DbType="Bit NOT NULL")]
		public bool IsApproved
		{
			get
			{
				return this._IsApproved;
			}
			set
			{
				if ((this._IsApproved != value))
				{
					this.OnIsApprovedChanging(value);
					this.SendPropertyChanging();
					this._IsApproved = value;
					this.SendPropertyChanged("IsApproved");
					this.OnIsApprovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLockedOut", DbType="Bit NOT NULL")]
		public bool IsLockedOut
		{
			get
			{
				return this._IsLockedOut;
			}
			set
			{
				if ((this._IsLockedOut != value))
				{
					this.OnIsLockedOutChanging(value);
					this.SendPropertyChanging();
					this._IsLockedOut = value;
					this.SendPropertyChanged("IsLockedOut");
					this.OnIsLockedOutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsOnline", DbType="Bit NOT NULL")]
		public bool IsOnline
		{
			get
			{
				return this._IsOnline;
			}
			set
			{
				if ((this._IsOnline != value))
				{
					this.OnIsOnlineChanging(value);
					this.SendPropertyChanging();
					this._IsOnline = value;
					this.SendPropertyChanged("IsOnline");
					this.OnIsOnlineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FailedLoginAttemptsCounter", DbType="Int NOT NULL")]
		public int FailedLoginAttemptsCounter
		{
			get
			{
				return this._FailedLoginAttemptsCounter;
			}
			set
			{
				if ((this._FailedLoginAttemptsCounter != value))
				{
					this.OnFailedLoginAttemptsCounterChanging(value);
					this.SendPropertyChanging();
					this._FailedLoginAttemptsCounter = value;
					this.SendPropertyChanged("FailedLoginAttemptsCounter");
					this.OnFailedLoginAttemptsCounterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_GraphicDetail", Storage="_GraphicDetails", ThisKey="Id", OtherKey="User_Id")]
		public EntitySet<GraphicDetail> GraphicDetails
		{
			get
			{
				return this._GraphicDetails;
			}
			set
			{
				this._GraphicDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Questionnaire", Storage="_Questionnaires", ThisKey="Id", OtherKey="User_Id")]
		public EntitySet<Questionnaire> Questionnaires
		{
			get
			{
				return this._Questionnaires;
			}
			set
			{
				this._Questionnaires.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Feedback", Storage="_Feedbacks", ThisKey="Id", OtherKey="User_Id")]
		public EntitySet<Feedback> Feedbacks
		{
			get
			{
				return this._Feedbacks;
			}
			set
			{
				this._Feedbacks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Test", Storage="_Tests", ThisKey="Id", OtherKey="User_Id")]
		public EntitySet<Test> Tests
		{
			get
			{
				return this._Tests;
			}
			set
			{
				this._Tests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User", Storage="_Role", ThisKey="Role_Id", OtherKey="Id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._Role_Id = value.Id;
					}
					else
					{
						this._Role_Id = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_User", Storage="_Location", ThisKey="Location_Id", OtherKey="Id", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._Location_Id = value.Id;
					}
					else
					{
						this._Location_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_User", Storage="_Company", ThisKey="Company_Id", OtherKey="Id", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._Company_Id = value.Id;
					}
					else
					{
						this._Company_Id = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GraphicDetails(GraphicDetail entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_GraphicDetails(GraphicDetail entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Questionnaires(Questionnaire entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Questionnaires(Questionnaire entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Feedbacks(Feedback entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Feedbacks(Feedback entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Tests(Test entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Tests(Test entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Locations")]
	public partial class Location : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Company_Id;
		
		private int _State_Id;
		
		private string _Name;
		
		private string _ShortName;
		
		private System.Nullable<int> _Region_Id;
		
		private EntitySet<User> _Users;
		
		private EntitySet<Evaluation> _Evaluations;
		
		private EntityRef<Region> _Region;
		
		private EntityRef<State> _State;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCompany_IdChanging(int value);
    partial void OnCompany_IdChanged();
    partial void OnState_IdChanging(int value);
    partial void OnState_IdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    partial void OnRegion_IdChanging(System.Nullable<int> value);
    partial void OnRegion_IdChanged();
    #endregion
		
		public Location()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._Evaluations = new EntitySet<Evaluation>(new Action<Evaluation>(this.attach_Evaluations), new Action<Evaluation>(this.detach_Evaluations));
			this._Region = default(EntityRef<Region>);
			this._State = default(EntityRef<State>);
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Company_Id", DbType="Int NOT NULL")]
		public int Company_Id
		{
			get
			{
				return this._Company_Id;
			}
			set
			{
				if ((this._Company_Id != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompany_IdChanging(value);
					this.SendPropertyChanging();
					this._Company_Id = value;
					this.SendPropertyChanged("Company_Id");
					this.OnCompany_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State_Id", DbType="Int NOT NULL")]
		public int State_Id
		{
			get
			{
				return this._State_Id;
			}
			set
			{
				if ((this._State_Id != value))
				{
					if (this._State.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnState_IdChanging(value);
					this.SendPropertyChanging();
					this._State_Id = value;
					this.SendPropertyChanged("State_Id");
					this.OnState_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Region_Id", DbType="Int")]
		public System.Nullable<int> Region_Id
		{
			get
			{
				return this._Region_Id;
			}
			set
			{
				if ((this._Region_Id != value))
				{
					if (this._Region.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegion_IdChanging(value);
					this.SendPropertyChanging();
					this._Region_Id = value;
					this.SendPropertyChanged("Region_Id");
					this.OnRegion_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_User", Storage="_Users", ThisKey="Id", OtherKey="Location_Id")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Evaluation", Storage="_Evaluations", ThisKey="Id", OtherKey="Location_Id")]
		public EntitySet<Evaluation> Evaluations
		{
			get
			{
				return this._Evaluations;
			}
			set
			{
				this._Evaluations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_Location", Storage="_Region", ThisKey="Region_Id", OtherKey="Id", IsForeignKey=true)]
		public Region Region
		{
			get
			{
				return this._Region.Entity;
			}
			set
			{
				Region previousValue = this._Region.Entity;
				if (((previousValue != value) 
							|| (this._Region.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Region.Entity = null;
						previousValue.Locations.Remove(this);
					}
					this._Region.Entity = value;
					if ((value != null))
					{
						value.Locations.Add(this);
						this._Region_Id = value.Id;
					}
					else
					{
						this._Region_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Region");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_Location", Storage="_State", ThisKey="State_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public State State
		{
			get
			{
				return this._State.Entity;
			}
			set
			{
				State previousValue = this._State.Entity;
				if (((previousValue != value) 
							|| (this._State.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._State.Entity = null;
						previousValue.Locations.Remove(this);
					}
					this._State.Entity = value;
					if ((value != null))
					{
						value.Locations.Add(this);
						this._State_Id = value.Id;
					}
					else
					{
						this._State_Id = default(int);
					}
					this.SendPropertyChanged("State");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Location", Storage="_Company", ThisKey="Company_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Locations.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Locations.Add(this);
						this._Company_Id = value.Id;
					}
					else
					{
						this._Company_Id = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
		
		private void attach_Evaluations(Evaluation entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_Evaluations(Evaluation entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SelectionAnswers")]
	public partial class SelectionAnswer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _CreationDate;
		
		private int _Option_Id;
		
		private int _Evaluation_Id;
		
		private int _Question_Id;
		
		private EntitySet<OptionBySelectionAnswer> _OptionBySelectionAnswers;
		
		private EntityRef<Evaluation> _Evaluation;
		
		private EntityRef<Option> _Option;
		
		private EntityRef<Question> _Question;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnOption_IdChanging(int value);
    partial void OnOption_IdChanged();
    partial void OnEvaluation_IdChanging(int value);
    partial void OnEvaluation_IdChanged();
    partial void OnQuestion_IdChanging(int value);
    partial void OnQuestion_IdChanged();
    #endregion
		
		public SelectionAnswer()
		{
			this._OptionBySelectionAnswers = new EntitySet<OptionBySelectionAnswer>(new Action<OptionBySelectionAnswer>(this.attach_OptionBySelectionAnswers), new Action<OptionBySelectionAnswer>(this.detach_OptionBySelectionAnswers));
			this._Evaluation = default(EntityRef<Evaluation>);
			this._Option = default(EntityRef<Option>);
			this._Question = default(EntityRef<Question>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Option_Id", DbType="Int NOT NULL")]
		public int Option_Id
		{
			get
			{
				return this._Option_Id;
			}
			set
			{
				if ((this._Option_Id != value))
				{
					if (this._Option.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOption_IdChanging(value);
					this.SendPropertyChanging();
					this._Option_Id = value;
					this.SendPropertyChanged("Option_Id");
					this.OnOption_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Evaluation_Id", DbType="Int NOT NULL")]
		public int Evaluation_Id
		{
			get
			{
				return this._Evaluation_Id;
			}
			set
			{
				if ((this._Evaluation_Id != value))
				{
					if (this._Evaluation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEvaluation_IdChanging(value);
					this.SendPropertyChanging();
					this._Evaluation_Id = value;
					this.SendPropertyChanged("Evaluation_Id");
					this.OnEvaluation_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Question_Id", DbType="Int NOT NULL")]
		public int Question_Id
		{
			get
			{
				return this._Question_Id;
			}
			set
			{
				if ((this._Question_Id != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestion_IdChanging(value);
					this.SendPropertyChanging();
					this._Question_Id = value;
					this.SendPropertyChanged("Question_Id");
					this.OnQuestion_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SelectionAnswer_OptionBySelectionAnswer", Storage="_OptionBySelectionAnswers", ThisKey="Id", OtherKey="SelectionAnswer_Id")]
		public EntitySet<OptionBySelectionAnswer> OptionBySelectionAnswers
		{
			get
			{
				return this._OptionBySelectionAnswers;
			}
			set
			{
				this._OptionBySelectionAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Evaluation_SelectionAnswer", Storage="_Evaluation", ThisKey="Evaluation_Id", OtherKey="Id", IsForeignKey=true)]
		public Evaluation Evaluation
		{
			get
			{
				return this._Evaluation.Entity;
			}
			set
			{
				Evaluation previousValue = this._Evaluation.Entity;
				if (((previousValue != value) 
							|| (this._Evaluation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Evaluation.Entity = null;
						previousValue.SelectionAnswers.Remove(this);
					}
					this._Evaluation.Entity = value;
					if ((value != null))
					{
						value.SelectionAnswers.Add(this);
						this._Evaluation_Id = value.Id;
					}
					else
					{
						this._Evaluation_Id = default(int);
					}
					this.SendPropertyChanged("Evaluation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Option_SelectionAnswer", Storage="_Option", ThisKey="Option_Id", OtherKey="Id", IsForeignKey=true)]
		public Option Option
		{
			get
			{
				return this._Option.Entity;
			}
			set
			{
				Option previousValue = this._Option.Entity;
				if (((previousValue != value) 
							|| (this._Option.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Option.Entity = null;
						previousValue.SelectionAnswers.Remove(this);
					}
					this._Option.Entity = value;
					if ((value != null))
					{
						value.SelectionAnswers.Add(this);
						this._Option_Id = value.Id;
					}
					else
					{
						this._Option_Id = default(int);
					}
					this.SendPropertyChanged("Option");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_SelectionAnswer", Storage="_Question", ThisKey="Question_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.SelectionAnswers.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.SelectionAnswers.Add(this);
						this._Question_Id = value.Id;
					}
					else
					{
						this._Question_Id = default(int);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OptionBySelectionAnswers(OptionBySelectionAnswer entity)
		{
			this.SendPropertyChanging();
			entity.SelectionAnswer = this;
		}
		
		private void detach_OptionBySelectionAnswers(OptionBySelectionAnswer entity)
		{
			this.SendPropertyChanging();
			entity.SelectionAnswer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Graphics")]
	public partial class Graphic : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Type;
		
		private string _Source;
		
		private string _Demographic;
		
		private int _Order;
		
		private EntitySet<GraphicDetail> _GraphicDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnSourceChanging(string value);
    partial void OnSourceChanged();
    partial void OnDemographicChanging(string value);
    partial void OnDemographicChanged();
    partial void OnOrderChanging(int value);
    partial void OnOrderChanged();
    #endregion
		
		public Graphic()
		{
			this._GraphicDetails = new EntitySet<GraphicDetail>(new Action<GraphicDetail>(this.attach_GraphicDetails), new Action<GraphicDetail>(this.detach_GraphicDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Source", DbType="VarChar(200)")]
		public string Source
		{
			get
			{
				return this._Source;
			}
			set
			{
				if ((this._Source != value))
				{
					this.OnSourceChanging(value);
					this.SendPropertyChanging();
					this._Source = value;
					this.SendPropertyChanged("Source");
					this.OnSourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Demographic", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Demographic
		{
			get
			{
				return this._Demographic;
			}
			set
			{
				if ((this._Demographic != value))
				{
					this.OnDemographicChanging(value);
					this.SendPropertyChanging();
					this._Demographic = value;
					this.SendPropertyChanged("Demographic");
					this.OnDemographicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Order]", Storage="_Order", DbType="Int NOT NULL")]
		public int Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Graphic_GraphicDetail", Storage="_GraphicDetails", ThisKey="Id", OtherKey="Graphic_Id")]
		public EntitySet<GraphicDetail> GraphicDetails
		{
			get
			{
				return this._GraphicDetails;
			}
			set
			{
				this._GraphicDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GraphicDetails(GraphicDetail entity)
		{
			this.SendPropertyChanging();
			entity.Graphic = this;
		}
		
		private void detach_GraphicDetails(GraphicDetail entity)
		{
			this.SendPropertyChanging();
			entity.Graphic = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GraphicsDetails")]
	public partial class GraphicDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Text;
		
		private System.DateTime _CreationDate;
		
		private int _User_Id;
		
		private int _Graphic_Id;
		
		private int _Test_Id;
		
		private int _Id;
		
		private string _Title;
		
		private string _AxisXName;
		
		private string _AxisYName;
		
		private EntityRef<Graphic> _Graphic;
		
		private EntityRef<User> _User;
		
		private EntityRef<Test> _Test;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnUser_IdChanging(int value);
    partial void OnUser_IdChanged();
    partial void OnGraphic_IdChanging(int value);
    partial void OnGraphic_IdChanged();
    partial void OnTest_IdChanging(int value);
    partial void OnTest_IdChanged();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnAxisXNameChanging(string value);
    partial void OnAxisXNameChanged();
    partial void OnAxisYNameChanging(string value);
    partial void OnAxisYNameChanged();
    #endregion
		
		public GraphicDetail()
		{
			this._Graphic = default(EntityRef<Graphic>);
			this._User = default(EntityRef<User>);
			this._Test = default(EntityRef<Test>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="VarChar(MAX)")]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Id", DbType="Int NOT NULL")]
		public int User_Id
		{
			get
			{
				return this._User_Id;
			}
			set
			{
				if ((this._User_Id != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_IdChanging(value);
					this.SendPropertyChanging();
					this._User_Id = value;
					this.SendPropertyChanged("User_Id");
					this.OnUser_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Graphic_Id", DbType="Int NOT NULL")]
		public int Graphic_Id
		{
			get
			{
				return this._Graphic_Id;
			}
			set
			{
				if ((this._Graphic_Id != value))
				{
					if (this._Graphic.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGraphic_IdChanging(value);
					this.SendPropertyChanging();
					this._Graphic_Id = value;
					this.SendPropertyChanged("Graphic_Id");
					this.OnGraphic_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Test_Id", DbType="Int NOT NULL")]
		public int Test_Id
		{
			get
			{
				return this._Test_Id;
			}
			set
			{
				if ((this._Test_Id != value))
				{
					if (this._Test.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTest_IdChanging(value);
					this.SendPropertyChanging();
					this._Test_Id = value;
					this.SendPropertyChanged("Test_Id");
					this.OnTest_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(100)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AxisXName", DbType="VarChar(20)")]
		public string AxisXName
		{
			get
			{
				return this._AxisXName;
			}
			set
			{
				if ((this._AxisXName != value))
				{
					this.OnAxisXNameChanging(value);
					this.SendPropertyChanging();
					this._AxisXName = value;
					this.SendPropertyChanged("AxisXName");
					this.OnAxisXNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AxisYName", DbType="VarChar(20)")]
		public string AxisYName
		{
			get
			{
				return this._AxisYName;
			}
			set
			{
				if ((this._AxisYName != value))
				{
					this.OnAxisYNameChanging(value);
					this.SendPropertyChanging();
					this._AxisYName = value;
					this.SendPropertyChanged("AxisYName");
					this.OnAxisYNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Graphic_GraphicDetail", Storage="_Graphic", ThisKey="Graphic_Id", OtherKey="Id", IsForeignKey=true)]
		public Graphic Graphic
		{
			get
			{
				return this._Graphic.Entity;
			}
			set
			{
				Graphic previousValue = this._Graphic.Entity;
				if (((previousValue != value) 
							|| (this._Graphic.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Graphic.Entity = null;
						previousValue.GraphicDetails.Remove(this);
					}
					this._Graphic.Entity = value;
					if ((value != null))
					{
						value.GraphicDetails.Add(this);
						this._Graphic_Id = value.Id;
					}
					else
					{
						this._Graphic_Id = default(int);
					}
					this.SendPropertyChanged("Graphic");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_GraphicDetail", Storage="_User", ThisKey="User_Id", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.GraphicDetails.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.GraphicDetails.Add(this);
						this._User_Id = value.Id;
					}
					else
					{
						this._User_Id = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_GraphicDetail", Storage="_Test", ThisKey="Test_Id", OtherKey="Id", IsForeignKey=true)]
		public Test Test
		{
			get
			{
				return this._Test.Entity;
			}
			set
			{
				Test previousValue = this._Test.Entity;
				if (((previousValue != value) 
							|| (this._Test.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Test.Entity = null;
						previousValue.GraphicDetails.Remove(this);
					}
					this._Test.Entity = value;
					if ((value != null))
					{
						value.GraphicDetails.Add(this);
						this._Test_Id = value.Id;
					}
					else
					{
						this._Test_Id = default(int);
					}
					this.SendPropertyChanged("Test");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ChiSquareDistribution")]
	public partial class ChiSquareDistribution : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _DegreesOfFreedom_Id;
		
		private int _SignificanceLevel_Id;
		
		private decimal _Value;
		
		private EntityRef<DegreesOfFreedom> _DegreesOfFreedom;
		
		private EntityRef<SignificanceLevel> _SignificanceLevel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDegreesOfFreedom_IdChanging(int value);
    partial void OnDegreesOfFreedom_IdChanged();
    partial void OnSignificanceLevel_IdChanging(int value);
    partial void OnSignificanceLevel_IdChanged();
    partial void OnValueChanging(decimal value);
    partial void OnValueChanged();
    #endregion
		
		public ChiSquareDistribution()
		{
			this._DegreesOfFreedom = default(EntityRef<DegreesOfFreedom>);
			this._SignificanceLevel = default(EntityRef<SignificanceLevel>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DegreesOfFreedom_Id", DbType="Int NOT NULL")]
		public int DegreesOfFreedom_Id
		{
			get
			{
				return this._DegreesOfFreedom_Id;
			}
			set
			{
				if ((this._DegreesOfFreedom_Id != value))
				{
					if (this._DegreesOfFreedom.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDegreesOfFreedom_IdChanging(value);
					this.SendPropertyChanging();
					this._DegreesOfFreedom_Id = value;
					this.SendPropertyChanged("DegreesOfFreedom_Id");
					this.OnDegreesOfFreedom_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SignificanceLevel_Id", DbType="Int NOT NULL")]
		public int SignificanceLevel_Id
		{
			get
			{
				return this._SignificanceLevel_Id;
			}
			set
			{
				if ((this._SignificanceLevel_Id != value))
				{
					if (this._SignificanceLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSignificanceLevel_IdChanging(value);
					this.SendPropertyChanging();
					this._SignificanceLevel_Id = value;
					this.SendPropertyChanged("SignificanceLevel_Id");
					this.OnSignificanceLevel_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Decimal(18,3) NOT NULL")]
		public decimal Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DegreesOfFreedom_ChiSquareDistribution", Storage="_DegreesOfFreedom", ThisKey="DegreesOfFreedom_Id", OtherKey="Id", IsForeignKey=true)]
		public DegreesOfFreedom DegreesOfFreedom
		{
			get
			{
				return this._DegreesOfFreedom.Entity;
			}
			set
			{
				DegreesOfFreedom previousValue = this._DegreesOfFreedom.Entity;
				if (((previousValue != value) 
							|| (this._DegreesOfFreedom.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DegreesOfFreedom.Entity = null;
						previousValue.ChiSquareDistributions.Remove(this);
					}
					this._DegreesOfFreedom.Entity = value;
					if ((value != null))
					{
						value.ChiSquareDistributions.Add(this);
						this._DegreesOfFreedom_Id = value.Id;
					}
					else
					{
						this._DegreesOfFreedom_Id = default(int);
					}
					this.SendPropertyChanged("DegreesOfFreedom");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SignificanceLevel_ChiSquareDistribution", Storage="_SignificanceLevel", ThisKey="SignificanceLevel_Id", OtherKey="Id", IsForeignKey=true)]
		public SignificanceLevel SignificanceLevel
		{
			get
			{
				return this._SignificanceLevel.Entity;
			}
			set
			{
				SignificanceLevel previousValue = this._SignificanceLevel.Entity;
				if (((previousValue != value) 
							|| (this._SignificanceLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SignificanceLevel.Entity = null;
						previousValue.ChiSquareDistributions.Remove(this);
					}
					this._SignificanceLevel.Entity = value;
					if ((value != null))
					{
						value.ChiSquareDistributions.Add(this);
						this._SignificanceLevel_Id = value.Id;
					}
					else
					{
						this._SignificanceLevel_Id = default(int);
					}
					this.SendPropertyChanged("SignificanceLevel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DegreesOfFreedom")]
	public partial class DegreesOfFreedom : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Value;
		
		private EntitySet<ChiSquareDistribution> _ChiSquareDistributions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnValueChanging(int value);
    partial void OnValueChanged();
    #endregion
		
		public DegreesOfFreedom()
		{
			this._ChiSquareDistributions = new EntitySet<ChiSquareDistribution>(new Action<ChiSquareDistribution>(this.attach_ChiSquareDistributions), new Action<ChiSquareDistribution>(this.detach_ChiSquareDistributions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Int NOT NULL")]
		public int Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DegreesOfFreedom_ChiSquareDistribution", Storage="_ChiSquareDistributions", ThisKey="Id", OtherKey="DegreesOfFreedom_Id")]
		public EntitySet<ChiSquareDistribution> ChiSquareDistributions
		{
			get
			{
				return this._ChiSquareDistributions;
			}
			set
			{
				this._ChiSquareDistributions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ChiSquareDistributions(ChiSquareDistribution entity)
		{
			this.SendPropertyChanging();
			entity.DegreesOfFreedom = this;
		}
		
		private void detach_ChiSquareDistributions(ChiSquareDistribution entity)
		{
			this.SendPropertyChanging();
			entity.DegreesOfFreedom = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SignificanceLevels")]
	public partial class SignificanceLevel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private decimal _Value;
		
		private EntitySet<ChiSquareDistribution> _ChiSquareDistributions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnValueChanging(decimal value);
    partial void OnValueChanged();
    #endregion
		
		public SignificanceLevel()
		{
			this._ChiSquareDistributions = new EntitySet<ChiSquareDistribution>(new Action<ChiSquareDistribution>(this.attach_ChiSquareDistributions), new Action<ChiSquareDistribution>(this.detach_ChiSquareDistributions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Decimal(18,3) NOT NULL")]
		public decimal Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SignificanceLevel_ChiSquareDistribution", Storage="_ChiSquareDistributions", ThisKey="Id", OtherKey="SignificanceLevel_Id")]
		public EntitySet<ChiSquareDistribution> ChiSquareDistributions
		{
			get
			{
				return this._ChiSquareDistributions;
			}
			set
			{
				this._ChiSquareDistributions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ChiSquareDistributions(ChiSquareDistribution entity)
		{
			this.SendPropertyChanging();
			entity.SignificanceLevel = this;
		}
		
		private void detach_ChiSquareDistributions(ChiSquareDistribution entity)
		{
			this.SendPropertyChanging();
			entity.SignificanceLevel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompaniesTypes")]
	public partial class CompaniesType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Company> _Companies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public CompaniesType()
		{
			this._Companies = new EntitySet<Company>(new Action<Company>(this.attach_Companies), new Action<Company>(this.detach_Companies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompaniesType_Company", Storage="_Companies", ThisKey="Id", OtherKey="CompanyType_Id")]
		public EntitySet<Company> Companies
		{
			get
			{
				return this._Companies;
			}
			set
			{
				this._Companies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.CompaniesType = this;
		}
		
		private void detach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.CompaniesType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EvaluationFO")]
	public partial class EvaluationFO : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Evaluation_Id;
		
		private int _FunctionalOrganization_Id;
		
		private EntityRef<Evaluation> _Evaluation;
		
		private EntityRef<FunctionalOrganization> _FunctionalOrganization;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEvaluation_IdChanging(int value);
    partial void OnEvaluation_IdChanged();
    partial void OnFunctionalOrganization_IdChanging(int value);
    partial void OnFunctionalOrganization_IdChanged();
    #endregion
		
		public EvaluationFO()
		{
			this._Evaluation = default(EntityRef<Evaluation>);
			this._FunctionalOrganization = default(EntityRef<FunctionalOrganization>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Evaluation_Id", DbType="Int NOT NULL")]
		public int Evaluation_Id
		{
			get
			{
				return this._Evaluation_Id;
			}
			set
			{
				if ((this._Evaluation_Id != value))
				{
					if (this._Evaluation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEvaluation_IdChanging(value);
					this.SendPropertyChanging();
					this._Evaluation_Id = value;
					this.SendPropertyChanged("Evaluation_Id");
					this.OnEvaluation_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FunctionalOrganization_Id", DbType="Int NOT NULL")]
		public int FunctionalOrganization_Id
		{
			get
			{
				return this._FunctionalOrganization_Id;
			}
			set
			{
				if ((this._FunctionalOrganization_Id != value))
				{
					if (this._FunctionalOrganization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFunctionalOrganization_IdChanging(value);
					this.SendPropertyChanging();
					this._FunctionalOrganization_Id = value;
					this.SendPropertyChanged("FunctionalOrganization_Id");
					this.OnFunctionalOrganization_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Evaluation_EvaluationFO", Storage="_Evaluation", ThisKey="Evaluation_Id", OtherKey="Id", IsForeignKey=true)]
		public Evaluation Evaluation
		{
			get
			{
				return this._Evaluation.Entity;
			}
			set
			{
				Evaluation previousValue = this._Evaluation.Entity;
				if (((previousValue != value) 
							|| (this._Evaluation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Evaluation.Entity = null;
						previousValue.EvaluationFOs.Remove(this);
					}
					this._Evaluation.Entity = value;
					if ((value != null))
					{
						value.EvaluationFOs.Add(this);
						this._Evaluation_Id = value.Id;
					}
					else
					{
						this._Evaluation_Id = default(int);
					}
					this.SendPropertyChanged("Evaluation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FunctionalOrganization_EvaluationFO", Storage="_FunctionalOrganization", ThisKey="FunctionalOrganization_Id", OtherKey="Id", IsForeignKey=true)]
		public FunctionalOrganization FunctionalOrganization
		{
			get
			{
				return this._FunctionalOrganization.Entity;
			}
			set
			{
				FunctionalOrganization previousValue = this._FunctionalOrganization.Entity;
				if (((previousValue != value) 
							|| (this._FunctionalOrganization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FunctionalOrganization.Entity = null;
						previousValue.EvaluationFOs.Remove(this);
					}
					this._FunctionalOrganization.Entity = value;
					if ((value != null))
					{
						value.EvaluationFOs.Add(this);
						this._FunctionalOrganization_Id = value.Id;
					}
					else
					{
						this._FunctionalOrganization_Id = default(int);
					}
					this.SendPropertyChanged("FunctionalOrganization");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Questionnaires")]
	public partial class Questionnaire : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Instructions;
		
		private System.DateTime _CreationDate;
		
		private string _Description;
		
		private int _User_Id;
		
		private bool _Template;
		
		private EntitySet<DemographicSelectorDetail> _DemographicSelectorDetails;
		
		private EntitySet<Category> _Categories;
		
		private EntitySet<Option> _Options;
		
		private EntitySet<Test> _Tests;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnInstructionsChanging(string value);
    partial void OnInstructionsChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnUser_IdChanging(int value);
    partial void OnUser_IdChanged();
    partial void OnTemplateChanging(bool value);
    partial void OnTemplateChanged();
    #endregion
		
		public Questionnaire()
		{
			this._DemographicSelectorDetails = new EntitySet<DemographicSelectorDetail>(new Action<DemographicSelectorDetail>(this.attach_DemographicSelectorDetails), new Action<DemographicSelectorDetail>(this.detach_DemographicSelectorDetails));
			this._Categories = new EntitySet<Category>(new Action<Category>(this.attach_Categories), new Action<Category>(this.detach_Categories));
			this._Options = new EntitySet<Option>(new Action<Option>(this.attach_Options), new Action<Option>(this.detach_Options));
			this._Tests = new EntitySet<Test>(new Action<Test>(this.attach_Tests), new Action<Test>(this.detach_Tests));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Instructions", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Instructions
		{
			get
			{
				return this._Instructions;
			}
			set
			{
				if ((this._Instructions != value))
				{
					this.OnInstructionsChanging(value);
					this.SendPropertyChanging();
					this._Instructions = value;
					this.SendPropertyChanged("Instructions");
					this.OnInstructionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Id", DbType="Int NOT NULL")]
		public int User_Id
		{
			get
			{
				return this._User_Id;
			}
			set
			{
				if ((this._User_Id != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_IdChanging(value);
					this.SendPropertyChanging();
					this._User_Id = value;
					this.SendPropertyChanged("User_Id");
					this.OnUser_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Template", DbType="Bit NOT NULL")]
		public bool Template
		{
			get
			{
				return this._Template;
			}
			set
			{
				if ((this._Template != value))
				{
					this.OnTemplateChanging(value);
					this.SendPropertyChanging();
					this._Template = value;
					this.SendPropertyChanged("Template");
					this.OnTemplateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Questionnaire_DemographicSelectorDetail", Storage="_DemographicSelectorDetails", ThisKey="Id", OtherKey="Questionnaire_Id")]
		public EntitySet<DemographicSelectorDetail> DemographicSelectorDetails
		{
			get
			{
				return this._DemographicSelectorDetails;
			}
			set
			{
				this._DemographicSelectorDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Questionnaire_Category", Storage="_Categories", ThisKey="Id", OtherKey="Questionnaire_Id")]
		public EntitySet<Category> Categories
		{
			get
			{
				return this._Categories;
			}
			set
			{
				this._Categories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Questionnaire_Option", Storage="_Options", ThisKey="Id", OtherKey="Questionnaire_Id")]
		public EntitySet<Option> Options
		{
			get
			{
				return this._Options;
			}
			set
			{
				this._Options.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Questionnaire_Test", Storage="_Tests", ThisKey="Id", OtherKey="Questionnaire_Id")]
		public EntitySet<Test> Tests
		{
			get
			{
				return this._Tests;
			}
			set
			{
				this._Tests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Questionnaire", Storage="_User", ThisKey="User_Id", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Questionnaires.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Questionnaires.Add(this);
						this._User_Id = value.Id;
					}
					else
					{
						this._User_Id = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DemographicSelectorDetails(DemographicSelectorDetail entity)
		{
			this.SendPropertyChanging();
			entity.Questionnaire = this;
		}
		
		private void detach_DemographicSelectorDetails(DemographicSelectorDetail entity)
		{
			this.SendPropertyChanging();
			entity.Questionnaire = null;
		}
		
		private void attach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.Questionnaire = this;
		}
		
		private void detach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.Questionnaire = null;
		}
		
		private void attach_Options(Option entity)
		{
			this.SendPropertyChanging();
			entity.Questionnaire = this;
		}
		
		private void detach_Options(Option entity)
		{
			this.SendPropertyChanging();
			entity.Questionnaire = null;
		}
		
		private void attach_Tests(Test entity)
		{
			this.SendPropertyChanging();
			entity.Questionnaire = this;
		}
		
		private void detach_Tests(Test entity)
		{
			this.SendPropertyChanging();
			entity.Questionnaire = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompanySectors")]
	public partial class CompanySector : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Company> _Companies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public CompanySector()
		{
			this._Companies = new EntitySet<Company>(new Action<Company>(this.attach_Companies), new Action<Company>(this.detach_Companies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanySector_Company", Storage="_Companies", ThisKey="Id", OtherKey="CompanySector_Id")]
		public EntitySet<Company> Companies
		{
			get
			{
				return this._Companies;
			}
			set
			{
				this._Companies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.CompanySector = this;
		}
		
		private void detach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.CompanySector = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StandardErrors")]
	public partial class StandardError : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Text;
		
		private decimal _Value;
		
		private EntitySet<Test> _Tests;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnValueChanging(decimal value);
    partial void OnValueChanged();
    #endregion
		
		public StandardError()
		{
			this._Tests = new EntitySet<Test>(new Action<Test>(this.attach_Tests), new Action<Test>(this.detach_Tests));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Decimal(18,2) NOT NULL")]
		public decimal Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StandardError_Test", Storage="_Tests", ThisKey="Id", OtherKey="StandardError_Id")]
		public EntitySet<Test> Tests
		{
			get
			{
				return this._Tests;
			}
			set
			{
				this._Tests.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tests(Test entity)
		{
			this.SendPropertyChanging();
			entity.StandardError = this;
		}
		
		private void detach_Tests(Test entity)
		{
			this.SendPropertyChanging();
			entity.StandardError = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ConfidenceLevels")]
	public partial class ConfidenceLevel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Text;
		
		private decimal _Value;
		
		private EntitySet<Test> _Tests;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnValueChanging(decimal value);
    partial void OnValueChanged();
    #endregion
		
		public ConfidenceLevel()
		{
			this._Tests = new EntitySet<Test>(new Action<Test>(this.attach_Tests), new Action<Test>(this.detach_Tests));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Decimal(18,4) NOT NULL")]
		public decimal Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ConfidenceLevel_Test", Storage="_Tests", ThisKey="Id", OtherKey="ConfidenceLevel_Id")]
		public EntitySet<Test> Tests
		{
			get
			{
				return this._Tests;
			}
			set
			{
				this._Tests.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tests(Test entity)
		{
			this.SendPropertyChanging();
			entity.ConfidenceLevel = this;
		}
		
		private void detach_Tests(Test entity)
		{
			this.SendPropertyChanging();
			entity.ConfidenceLevel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Features")]
	public partial class Feature : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _FeedbackType_Id;
		
		private EntitySet<Score> _Scores;
		
		private EntityRef<FeedbackType> _FeedbackType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFeedbackType_IdChanging(int value);
    partial void OnFeedbackType_IdChanged();
    #endregion
		
		public Feature()
		{
			this._Scores = new EntitySet<Score>(new Action<Score>(this.attach_Scores), new Action<Score>(this.detach_Scores));
			this._FeedbackType = default(EntityRef<FeedbackType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FeedbackType_Id", DbType="Int NOT NULL")]
		public int FeedbackType_Id
		{
			get
			{
				return this._FeedbackType_Id;
			}
			set
			{
				if ((this._FeedbackType_Id != value))
				{
					if (this._FeedbackType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFeedbackType_IdChanging(value);
					this.SendPropertyChanging();
					this._FeedbackType_Id = value;
					this.SendPropertyChanged("FeedbackType_Id");
					this.OnFeedbackType_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Feature_Score", Storage="_Scores", ThisKey="Id", OtherKey="Feature_Id")]
		public EntitySet<Score> Scores
		{
			get
			{
				return this._Scores;
			}
			set
			{
				this._Scores.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FeedbackType_Feature", Storage="_FeedbackType", ThisKey="FeedbackType_Id", OtherKey="Id", IsForeignKey=true)]
		public FeedbackType FeedbackType
		{
			get
			{
				return this._FeedbackType.Entity;
			}
			set
			{
				FeedbackType previousValue = this._FeedbackType.Entity;
				if (((previousValue != value) 
							|| (this._FeedbackType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FeedbackType.Entity = null;
						previousValue.Features.Remove(this);
					}
					this._FeedbackType.Entity = value;
					if ((value != null))
					{
						value.Features.Add(this);
						this._FeedbackType_Id = value.Id;
					}
					else
					{
						this._FeedbackType_Id = default(int);
					}
					this.SendPropertyChanged("FeedbackType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Scores(Score entity)
		{
			this.SendPropertyChanging();
			entity.Feature = this;
		}
		
		private void detach_Scores(Score entity)
		{
			this.SendPropertyChanging();
			entity.Feature = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Scores")]
	public partial class Score : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Value;
		
		private int _Feature_Id;
		
		private int _Feedback_Id;
		
		private System.DateTime _CreationDate;
		
		private EntityRef<Feature> _Feature;
		
		private EntityRef<Feedback> _Feedback;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnValueChanging(int value);
    partial void OnValueChanged();
    partial void OnFeature_IdChanging(int value);
    partial void OnFeature_IdChanged();
    partial void OnFeedback_IdChanging(int value);
    partial void OnFeedback_IdChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    #endregion
		
		public Score()
		{
			this._Feature = default(EntityRef<Feature>);
			this._Feedback = default(EntityRef<Feedback>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Int NOT NULL")]
		public int Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Feature_Id", DbType="Int NOT NULL")]
		public int Feature_Id
		{
			get
			{
				return this._Feature_Id;
			}
			set
			{
				if ((this._Feature_Id != value))
				{
					if (this._Feature.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFeature_IdChanging(value);
					this.SendPropertyChanging();
					this._Feature_Id = value;
					this.SendPropertyChanged("Feature_Id");
					this.OnFeature_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Feedback_Id", DbType="Int NOT NULL")]
		public int Feedback_Id
		{
			get
			{
				return this._Feedback_Id;
			}
			set
			{
				if ((this._Feedback_Id != value))
				{
					if (this._Feedback.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFeedback_IdChanging(value);
					this.SendPropertyChanging();
					this._Feedback_Id = value;
					this.SendPropertyChanged("Feedback_Id");
					this.OnFeedback_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Feature_Score", Storage="_Feature", ThisKey="Feature_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Feature Feature
		{
			get
			{
				return this._Feature.Entity;
			}
			set
			{
				Feature previousValue = this._Feature.Entity;
				if (((previousValue != value) 
							|| (this._Feature.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Feature.Entity = null;
						previousValue.Scores.Remove(this);
					}
					this._Feature.Entity = value;
					if ((value != null))
					{
						value.Scores.Add(this);
						this._Feature_Id = value.Id;
					}
					else
					{
						this._Feature_Id = default(int);
					}
					this.SendPropertyChanged("Feature");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Feedback_Score", Storage="_Feedback", ThisKey="Feedback_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Feedback Feedback
		{
			get
			{
				return this._Feedback.Entity;
			}
			set
			{
				Feedback previousValue = this._Feedback.Entity;
				if (((previousValue != value) 
							|| (this._Feedback.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Feedback.Entity = null;
						previousValue.Scores.Remove(this);
					}
					this._Feedback.Entity = value;
					if ((value != null))
					{
						value.Scores.Add(this);
						this._Feedback_Id = value.Id;
					}
					else
					{
						this._Feedback_Id = default(int);
					}
					this.SendPropertyChanged("Feedback");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FeedbackTypes")]
	public partial class FeedbackType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Feature> _Features;
		
		private EntitySet<Feedback> _Feedbacks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public FeedbackType()
		{
			this._Features = new EntitySet<Feature>(new Action<Feature>(this.attach_Features), new Action<Feature>(this.detach_Features));
			this._Feedbacks = new EntitySet<Feedback>(new Action<Feedback>(this.attach_Feedbacks), new Action<Feedback>(this.detach_Feedbacks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FeedbackType_Feature", Storage="_Features", ThisKey="Id", OtherKey="FeedbackType_Id")]
		public EntitySet<Feature> Features
		{
			get
			{
				return this._Features;
			}
			set
			{
				this._Features.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FeedbackType_Feedback", Storage="_Feedbacks", ThisKey="Id", OtherKey="FeedbackType_Id")]
		public EntitySet<Feedback> Feedbacks
		{
			get
			{
				return this._Feedbacks;
			}
			set
			{
				this._Feedbacks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Features(Feature entity)
		{
			this.SendPropertyChanging();
			entity.FeedbackType = this;
		}
		
		private void detach_Features(Feature entity)
		{
			this.SendPropertyChanging();
			entity.FeedbackType = null;
		}
		
		private void attach_Feedbacks(Feedback entity)
		{
			this.SendPropertyChanging();
			entity.FeedbackType = this;
		}
		
		private void detach_Feedbacks(Feedback entity)
		{
			this.SendPropertyChanging();
			entity.FeedbackType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Feedbacks")]
	public partial class Feedback : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Comments;
		
		private string _AddComments;
		
		private System.Nullable<int> _User_Id;
		
		private int _FeedbackType_Id;
		
		private bool _Show;
		
		private EntitySet<Score> _Scores;
		
		private EntityRef<FeedbackType> _FeedbackType;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnAddCommentsChanging(string value);
    partial void OnAddCommentsChanged();
    partial void OnUser_IdChanging(System.Nullable<int> value);
    partial void OnUser_IdChanged();
    partial void OnFeedbackType_IdChanging(int value);
    partial void OnFeedbackType_IdChanged();
    partial void OnShowChanging(bool value);
    partial void OnShowChanged();
    #endregion
		
		public Feedback()
		{
			this._Scores = new EntitySet<Score>(new Action<Score>(this.attach_Scores), new Action<Score>(this.detach_Scores));
			this._FeedbackType = default(EntityRef<FeedbackType>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="VarChar(MAX)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddComments", DbType="VarChar(MAX)")]
		public string AddComments
		{
			get
			{
				return this._AddComments;
			}
			set
			{
				if ((this._AddComments != value))
				{
					this.OnAddCommentsChanging(value);
					this.SendPropertyChanging();
					this._AddComments = value;
					this.SendPropertyChanged("AddComments");
					this.OnAddCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Id", DbType="Int")]
		public System.Nullable<int> User_Id
		{
			get
			{
				return this._User_Id;
			}
			set
			{
				if ((this._User_Id != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_IdChanging(value);
					this.SendPropertyChanging();
					this._User_Id = value;
					this.SendPropertyChanged("User_Id");
					this.OnUser_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FeedbackType_Id", DbType="Int NOT NULL")]
		public int FeedbackType_Id
		{
			get
			{
				return this._FeedbackType_Id;
			}
			set
			{
				if ((this._FeedbackType_Id != value))
				{
					if (this._FeedbackType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFeedbackType_IdChanging(value);
					this.SendPropertyChanging();
					this._FeedbackType_Id = value;
					this.SendPropertyChanged("FeedbackType_Id");
					this.OnFeedbackType_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Show", DbType="Bit NOT NULL")]
		public bool Show
		{
			get
			{
				return this._Show;
			}
			set
			{
				if ((this._Show != value))
				{
					this.OnShowChanging(value);
					this.SendPropertyChanging();
					this._Show = value;
					this.SendPropertyChanged("Show");
					this.OnShowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Feedback_Score", Storage="_Scores", ThisKey="Id", OtherKey="Feedback_Id")]
		public EntitySet<Score> Scores
		{
			get
			{
				return this._Scores;
			}
			set
			{
				this._Scores.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FeedbackType_Feedback", Storage="_FeedbackType", ThisKey="FeedbackType_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public FeedbackType FeedbackType
		{
			get
			{
				return this._FeedbackType.Entity;
			}
			set
			{
				FeedbackType previousValue = this._FeedbackType.Entity;
				if (((previousValue != value) 
							|| (this._FeedbackType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FeedbackType.Entity = null;
						previousValue.Feedbacks.Remove(this);
					}
					this._FeedbackType.Entity = value;
					if ((value != null))
					{
						value.Feedbacks.Add(this);
						this._FeedbackType_Id = value.Id;
					}
					else
					{
						this._FeedbackType_Id = default(int);
					}
					this.SendPropertyChanged("FeedbackType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Feedback", Storage="_User", ThisKey="User_Id", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Feedbacks.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Feedbacks.Add(this);
						this._User_Id = value.Id;
					}
					else
					{
						this._User_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Scores(Score entity)
		{
			this.SendPropertyChanging();
			entity.Feedback = this;
		}
		
		private void detach_Scores(Score entity)
		{
			this.SendPropertyChanging();
			entity.Feedback = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FunctionalOrganizationTypes")]
	public partial class FunctionalOrganizationType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _ShortName;
		
		private int _Company_Id;
		
		private System.Nullable<int> _FOTParent_Id;
		
		private EntitySet<FunctionalOrganizationType> _FunctionalOrganizationTypes;
		
		private EntitySet<FunctionalOrganization> _FunctionalOrganizations;
		
		private EntitySet<DemographicsInTest> _DemographicsInTests;
		
		private EntityRef<FunctionalOrganizationType> _Parent;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    partial void OnCompany_IdChanging(int value);
    partial void OnCompany_IdChanged();
    partial void OnFOTParent_IdChanging(System.Nullable<int> value);
    partial void OnFOTParent_IdChanged();
    #endregion
		
		public FunctionalOrganizationType()
		{
			this._FunctionalOrganizationTypes = new EntitySet<FunctionalOrganizationType>(new Action<FunctionalOrganizationType>(this.attach_FunctionalOrganizationTypes), new Action<FunctionalOrganizationType>(this.detach_FunctionalOrganizationTypes));
			this._FunctionalOrganizations = new EntitySet<FunctionalOrganization>(new Action<FunctionalOrganization>(this.attach_FunctionalOrganizations), new Action<FunctionalOrganization>(this.detach_FunctionalOrganizations));
			this._DemographicsInTests = new EntitySet<DemographicsInTest>(new Action<DemographicsInTest>(this.attach_DemographicsInTests), new Action<DemographicsInTest>(this.detach_DemographicsInTests));
			this._Parent = default(EntityRef<FunctionalOrganizationType>);
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Company_Id", DbType="Int NOT NULL")]
		public int Company_Id
		{
			get
			{
				return this._Company_Id;
			}
			set
			{
				if ((this._Company_Id != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompany_IdChanging(value);
					this.SendPropertyChanging();
					this._Company_Id = value;
					this.SendPropertyChanged("Company_Id");
					this.OnCompany_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FOTParent_Id", DbType="Int")]
		public System.Nullable<int> FOTParent_Id
		{
			get
			{
				return this._FOTParent_Id;
			}
			set
			{
				if ((this._FOTParent_Id != value))
				{
					if (this._Parent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFOTParent_IdChanging(value);
					this.SendPropertyChanging();
					this._FOTParent_Id = value;
					this.SendPropertyChanged("FOTParent_Id");
					this.OnFOTParent_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FunctionalOrganizationType_FunctionalOrganizationType", Storage="_FunctionalOrganizationTypes", ThisKey="Id", OtherKey="FOTParent_Id")]
		public EntitySet<FunctionalOrganizationType> FunctionalOrganizationTypes
		{
			get
			{
				return this._FunctionalOrganizationTypes;
			}
			set
			{
				this._FunctionalOrganizationTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FunctionalOrganizationType_FunctionalOrganization", Storage="_FunctionalOrganizations", ThisKey="Id", OtherKey="Type_Id")]
		public EntitySet<FunctionalOrganization> FunctionalOrganizations
		{
			get
			{
				return this._FunctionalOrganizations;
			}
			set
			{
				this._FunctionalOrganizations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FunctionalOrganizationType_DemographicsInTest", Storage="_DemographicsInTests", ThisKey="Id", OtherKey="FOT_Id")]
		public EntitySet<DemographicsInTest> DemographicsInTests
		{
			get
			{
				return this._DemographicsInTests;
			}
			set
			{
				this._DemographicsInTests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FunctionalOrganizationType_FunctionalOrganizationType", Storage="_Parent", ThisKey="FOTParent_Id", OtherKey="Id", IsForeignKey=true)]
		public FunctionalOrganizationType Parent
		{
			get
			{
				return this._Parent.Entity;
			}
			set
			{
				FunctionalOrganizationType previousValue = this._Parent.Entity;
				if (((previousValue != value) 
							|| (this._Parent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parent.Entity = null;
						previousValue.FunctionalOrganizationTypes.Remove(this);
					}
					this._Parent.Entity = value;
					if ((value != null))
					{
						value.FunctionalOrganizationTypes.Add(this);
						this._FOTParent_Id = value.Id;
					}
					else
					{
						this._FOTParent_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Parent");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_FunctionalOrganizationType", Storage="_Company", ThisKey="Company_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.FunctionalOrganizationTypes.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.FunctionalOrganizationTypes.Add(this);
						this._Company_Id = value.Id;
					}
					else
					{
						this._Company_Id = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FunctionalOrganizationTypes(FunctionalOrganizationType entity)
		{
			this.SendPropertyChanging();
			entity.Parent = this;
		}
		
		private void detach_FunctionalOrganizationTypes(FunctionalOrganizationType entity)
		{
			this.SendPropertyChanging();
			entity.Parent = null;
		}
		
		private void attach_FunctionalOrganizations(FunctionalOrganization entity)
		{
			this.SendPropertyChanging();
			entity.FunctionalOrganizationType = this;
		}
		
		private void detach_FunctionalOrganizations(FunctionalOrganization entity)
		{
			this.SendPropertyChanging();
			entity.FunctionalOrganizationType = null;
		}
		
		private void attach_DemographicsInTests(DemographicsInTest entity)
		{
			this.SendPropertyChanging();
			entity.FunctionalOrganizationType = this;
		}
		
		private void detach_DemographicsInTests(DemographicsInTest entity)
		{
			this.SendPropertyChanging();
			entity.FunctionalOrganizationType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PositionLevels")]
	public partial class PositionLevel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _ShortName;
		
		private int _Level;
		
		private int _Company_Id;
		
		private EntitySet<Evaluation> _Evaluations;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    partial void OnLevelChanging(int value);
    partial void OnLevelChanged();
    partial void OnCompany_IdChanging(int value);
    partial void OnCompany_IdChanged();
    #endregion
		
		public PositionLevel()
		{
			this._Evaluations = new EntitySet<Evaluation>(new Action<Evaluation>(this.attach_Evaluations), new Action<Evaluation>(this.detach_Evaluations));
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortName", DbType="VarChar(20)")]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Level]", Storage="_Level", DbType="Int NOT NULL")]
		public int Level
		{
			get
			{
				return this._Level;
			}
			set
			{
				if ((this._Level != value))
				{
					this.OnLevelChanging(value);
					this.SendPropertyChanging();
					this._Level = value;
					this.SendPropertyChanged("Level");
					this.OnLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Company_Id", DbType="Int NOT NULL")]
		public int Company_Id
		{
			get
			{
				return this._Company_Id;
			}
			set
			{
				if ((this._Company_Id != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompany_IdChanging(value);
					this.SendPropertyChanging();
					this._Company_Id = value;
					this.SendPropertyChanged("Company_Id");
					this.OnCompany_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PositionLevel_Evaluation", Storage="_Evaluations", ThisKey="Id", OtherKey="PositionLevel_Id")]
		public EntitySet<Evaluation> Evaluations
		{
			get
			{
				return this._Evaluations;
			}
			set
			{
				this._Evaluations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_PositionLevel", Storage="_Company", ThisKey="Company_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.PositionLevels.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.PositionLevels.Add(this);
						this._Company_Id = value.Id;
					}
					else
					{
						this._Company_Id = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Evaluations(Evaluation entity)
		{
			this.SendPropertyChanging();
			entity.PositionLevel = this;
		}
		
		private void detach_Evaluations(Evaluation entity)
		{
			this.SendPropertyChanging();
			entity.PositionLevel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.States")]
	public partial class State : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _Country_Id;
		
		private string _Code;
		
		private EntitySet<Location> _Locations;
		
		private EntitySet<ExecutiveReport> _ExecutiveReports;
		
		private EntityRef<Country> _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCountry_IdChanging(int value);
    partial void OnCountry_IdChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    #endregion
		
		public State()
		{
			this._Locations = new EntitySet<Location>(new Action<Location>(this.attach_Locations), new Action<Location>(this.detach_Locations));
			this._ExecutiveReports = new EntitySet<ExecutiveReport>(new Action<ExecutiveReport>(this.attach_ExecutiveReports), new Action<ExecutiveReport>(this.detach_ExecutiveReports));
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country_Id", DbType="Int NOT NULL")]
		public int Country_Id
		{
			get
			{
				return this._Country_Id;
			}
			set
			{
				if ((this._Country_Id != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountry_IdChanging(value);
					this.SendPropertyChanging();
					this._Country_Id = value;
					this.SendPropertyChanged("Country_Id");
					this.OnCountry_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="VarChar(5)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_Location", Storage="_Locations", ThisKey="Id", OtherKey="State_Id")]
		public EntitySet<Location> Locations
		{
			get
			{
				return this._Locations;
			}
			set
			{
				this._Locations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_ExecutiveReport", Storage="_ExecutiveReports", ThisKey="Id", OtherKey="State_Id")]
		public EntitySet<ExecutiveReport> ExecutiveReports
		{
			get
			{
				return this._ExecutiveReports;
			}
			set
			{
				this._ExecutiveReports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_State", Storage="_Country", ThisKey="Country_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.States.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.States.Add(this);
						this._Country_Id = value.Id;
					}
					else
					{
						this._Country_Id = default(int);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Locations(Location entity)
		{
			this.SendPropertyChanging();
			entity.State = this;
		}
		
		private void detach_Locations(Location entity)
		{
			this.SendPropertyChanging();
			entity.State = null;
		}
		
		private void attach_ExecutiveReports(ExecutiveReport entity)
		{
			this.SendPropertyChanging();
			entity.State = this;
		}
		
		private void detach_ExecutiveReports(ExecutiveReport entity)
		{
			this.SendPropertyChanging();
			entity.State = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Countries")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Code;
		
		private string _Map;
		
		private EntitySet<State> _States;
		
		private EntitySet<ContactUs> _ContactUs;
		
		private EntitySet<ExecutiveReport> _ExecutiveReports;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnMapChanging(string value);
    partial void OnMapChanged();
    #endregion
		
		public Country()
		{
			this._States = new EntitySet<State>(new Action<State>(this.attach_States), new Action<State>(this.detach_States));
			this._ContactUs = new EntitySet<ContactUs>(new Action<ContactUs>(this.attach_ContactUs), new Action<ContactUs>(this.detach_ContactUs));
			this._ExecutiveReports = new EntitySet<ExecutiveReport>(new Action<ExecutiveReport>(this.attach_ExecutiveReports), new Action<ExecutiveReport>(this.detach_ExecutiveReports));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Map", DbType="VarChar(50)")]
		public string Map
		{
			get
			{
				return this._Map;
			}
			set
			{
				if ((this._Map != value))
				{
					this.OnMapChanging(value);
					this.SendPropertyChanging();
					this._Map = value;
					this.SendPropertyChanged("Map");
					this.OnMapChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_State", Storage="_States", ThisKey="Id", OtherKey="Country_Id")]
		public EntitySet<State> States
		{
			get
			{
				return this._States;
			}
			set
			{
				this._States.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_ContactUs", Storage="_ContactUs", ThisKey="Id", OtherKey="Country_Id")]
		public EntitySet<ContactUs> ContactUs
		{
			get
			{
				return this._ContactUs;
			}
			set
			{
				this._ContactUs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_ExecutiveReport", Storage="_ExecutiveReports", ThisKey="Id", OtherKey="Country_Id")]
		public EntitySet<ExecutiveReport> ExecutiveReports
		{
			get
			{
				return this._ExecutiveReports;
			}
			set
			{
				this._ExecutiveReports.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_States(State entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_States(State entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_ContactUs(ContactUs entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_ContactUs(ContactUs entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_ExecutiveReports(ExecutiveReport entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_ExecutiveReports(ExecutiveReport entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Companies")]
	public partial class Company : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Number;
		
		private string _Url;
		
		private string _Phone;
		
		private string _Contact;
		
		private string _Address;
		
		private string _Image;
		
		private int _CompanyType_Id;
		
		private System.Nullable<int> _CompanyAssociated_Id;
		
		private System.Nullable<int> _CompanySector_Id;
		
		private bool _ShowClimate;
		
		private EntitySet<Region> _Regions;
		
		private EntitySet<User> _Users;
		
		private EntitySet<Location> _Locations;
		
		private EntitySet<FunctionalOrganizationType> _FunctionalOrganizationTypes;
		
		private EntitySet<PositionLevel> _PositionLevels;
		
		private EntitySet<Company> _Companies;
		
		private EntitySet<Demo> _Demos;
		
		private EntitySet<Seniority> _Seniorities;
		
		private EntitySet<PerformanceEvaluation> _PerformanceEvaluations;
		
		private EntitySet<InstructionLevel> _InstructionLevels;
		
		private EntitySet<Age> _Ages;
		
		private EntitySet<ClimateScale> _ClimateScales;
		
		private EntitySet<Category> _Categories;
		
		private EntitySet<Test> _Tests;
		
		private EntityRef<Company> _CompanyAssociated;
		
		private EntityRef<CompaniesType> _CompaniesType;
		
		private EntityRef<CompanySector> _CompanySector;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnContactChanging(string value);
    partial void OnContactChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    partial void OnCompanyType_IdChanging(int value);
    partial void OnCompanyType_IdChanged();
    partial void OnCompanyAssociated_IdChanging(System.Nullable<int> value);
    partial void OnCompanyAssociated_IdChanged();
    partial void OnCompanySector_IdChanging(System.Nullable<int> value);
    partial void OnCompanySector_IdChanged();
    partial void OnShowClimateChanging(bool value);
    partial void OnShowClimateChanged();
    #endregion
		
		public Company()
		{
			this._Regions = new EntitySet<Region>(new Action<Region>(this.attach_Regions), new Action<Region>(this.detach_Regions));
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._Locations = new EntitySet<Location>(new Action<Location>(this.attach_Locations), new Action<Location>(this.detach_Locations));
			this._FunctionalOrganizationTypes = new EntitySet<FunctionalOrganizationType>(new Action<FunctionalOrganizationType>(this.attach_FunctionalOrganizationTypes), new Action<FunctionalOrganizationType>(this.detach_FunctionalOrganizationTypes));
			this._PositionLevels = new EntitySet<PositionLevel>(new Action<PositionLevel>(this.attach_PositionLevels), new Action<PositionLevel>(this.detach_PositionLevels));
			this._Companies = new EntitySet<Company>(new Action<Company>(this.attach_Companies), new Action<Company>(this.detach_Companies));
			this._Demos = new EntitySet<Demo>(new Action<Demo>(this.attach_Demos), new Action<Demo>(this.detach_Demos));
			this._Seniorities = new EntitySet<Seniority>(new Action<Seniority>(this.attach_Seniorities), new Action<Seniority>(this.detach_Seniorities));
			this._PerformanceEvaluations = new EntitySet<PerformanceEvaluation>(new Action<PerformanceEvaluation>(this.attach_PerformanceEvaluations), new Action<PerformanceEvaluation>(this.detach_PerformanceEvaluations));
			this._InstructionLevels = new EntitySet<InstructionLevel>(new Action<InstructionLevel>(this.attach_InstructionLevels), new Action<InstructionLevel>(this.detach_InstructionLevels));
			this._Ages = new EntitySet<Age>(new Action<Age>(this.attach_Ages), new Action<Age>(this.detach_Ages));
			this._ClimateScales = new EntitySet<ClimateScale>(new Action<ClimateScale>(this.attach_ClimateScales), new Action<ClimateScale>(this.detach_ClimateScales));
			this._Categories = new EntitySet<Category>(new Action<Category>(this.attach_Categories), new Action<Category>(this.detach_Categories));
			this._Tests = new EntitySet<Test>(new Action<Test>(this.attach_Tests), new Action<Test>(this.detach_Tests));
			this._CompanyAssociated = default(EntityRef<Company>);
			this._CompaniesType = default(EntityRef<CompaniesType>);
			this._CompanySector = default(EntityRef<CompanySector>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="VarChar(100)")]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contact", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Contact
		{
			get
			{
				return this._Contact;
			}
			set
			{
				if ((this._Contact != value))
				{
					this.OnContactChanging(value);
					this.SendPropertyChanging();
					this._Contact = value;
					this.SendPropertyChanged("Contact");
					this.OnContactChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="VarChar(50)")]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyType_Id", DbType="Int NOT NULL")]
		public int CompanyType_Id
		{
			get
			{
				return this._CompanyType_Id;
			}
			set
			{
				if ((this._CompanyType_Id != value))
				{
					if (this._CompaniesType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyType_IdChanging(value);
					this.SendPropertyChanging();
					this._CompanyType_Id = value;
					this.SendPropertyChanged("CompanyType_Id");
					this.OnCompanyType_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyAssociated_Id", DbType="Int")]
		public System.Nullable<int> CompanyAssociated_Id
		{
			get
			{
				return this._CompanyAssociated_Id;
			}
			set
			{
				if ((this._CompanyAssociated_Id != value))
				{
					if (this._CompanyAssociated.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyAssociated_IdChanging(value);
					this.SendPropertyChanging();
					this._CompanyAssociated_Id = value;
					this.SendPropertyChanged("CompanyAssociated_Id");
					this.OnCompanyAssociated_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanySector_Id", DbType="Int")]
		public System.Nullable<int> CompanySector_Id
		{
			get
			{
				return this._CompanySector_Id;
			}
			set
			{
				if ((this._CompanySector_Id != value))
				{
					if (this._CompanySector.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanySector_IdChanging(value);
					this.SendPropertyChanging();
					this._CompanySector_Id = value;
					this.SendPropertyChanged("CompanySector_Id");
					this.OnCompanySector_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShowClimate", DbType="Bit NOT NULL")]
		public bool ShowClimate
		{
			get
			{
				return this._ShowClimate;
			}
			set
			{
				if ((this._ShowClimate != value))
				{
					this.OnShowClimateChanging(value);
					this.SendPropertyChanging();
					this._ShowClimate = value;
					this.SendPropertyChanged("ShowClimate");
					this.OnShowClimateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Region", Storage="_Regions", ThisKey="Id", OtherKey="Company_Id")]
		public EntitySet<Region> Regions
		{
			get
			{
				return this._Regions;
			}
			set
			{
				this._Regions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_User", Storage="_Users", ThisKey="Id", OtherKey="Company_Id")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Location", Storage="_Locations", ThisKey="Id", OtherKey="Company_Id")]
		public EntitySet<Location> Locations
		{
			get
			{
				return this._Locations;
			}
			set
			{
				this._Locations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_FunctionalOrganizationType", Storage="_FunctionalOrganizationTypes", ThisKey="Id", OtherKey="Company_Id")]
		public EntitySet<FunctionalOrganizationType> FunctionalOrganizationTypes
		{
			get
			{
				return this._FunctionalOrganizationTypes;
			}
			set
			{
				this._FunctionalOrganizationTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_PositionLevel", Storage="_PositionLevels", ThisKey="Id", OtherKey="Company_Id")]
		public EntitySet<PositionLevel> PositionLevels
		{
			get
			{
				return this._PositionLevels;
			}
			set
			{
				this._PositionLevels.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Company", Storage="_Companies", ThisKey="Id", OtherKey="CompanyAssociated_Id")]
		public EntitySet<Company> Companies
		{
			get
			{
				return this._Companies;
			}
			set
			{
				this._Companies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Demo", Storage="_Demos", ThisKey="Id", OtherKey="Company_Id")]
		public EntitySet<Demo> Demos
		{
			get
			{
				return this._Demos;
			}
			set
			{
				this._Demos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Seniority", Storage="_Seniorities", ThisKey="Id", OtherKey="Company_Id")]
		public EntitySet<Seniority> Seniorities
		{
			get
			{
				return this._Seniorities;
			}
			set
			{
				this._Seniorities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_PerformanceEvaluation", Storage="_PerformanceEvaluations", ThisKey="Id", OtherKey="Company_Id")]
		public EntitySet<PerformanceEvaluation> PerformanceEvaluations
		{
			get
			{
				return this._PerformanceEvaluations;
			}
			set
			{
				this._PerformanceEvaluations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_InstructionLevel", Storage="_InstructionLevels", ThisKey="Id", OtherKey="Company_Id")]
		public EntitySet<InstructionLevel> InstructionLevels
		{
			get
			{
				return this._InstructionLevels;
			}
			set
			{
				this._InstructionLevels.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Age", Storage="_Ages", ThisKey="Id", OtherKey="Company_Id")]
		public EntitySet<Age> Ages
		{
			get
			{
				return this._Ages;
			}
			set
			{
				this._Ages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_ClimateScale", Storage="_ClimateScales", ThisKey="Id", OtherKey="Company_Id")]
		public EntitySet<ClimateScale> ClimateScales
		{
			get
			{
				return this._ClimateScales;
			}
			set
			{
				this._ClimateScales.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Category", Storage="_Categories", ThisKey="Id", OtherKey="Company_Id")]
		public EntitySet<Category> Categories
		{
			get
			{
				return this._Categories;
			}
			set
			{
				this._Categories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Test", Storage="_Tests", ThisKey="Id", OtherKey="Company_Id")]
		public EntitySet<Test> Tests
		{
			get
			{
				return this._Tests;
			}
			set
			{
				this._Tests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Company", Storage="_CompanyAssociated", ThisKey="CompanyAssociated_Id", OtherKey="Id", IsForeignKey=true)]
		public Company CompanyAssociated
		{
			get
			{
				return this._CompanyAssociated.Entity;
			}
			set
			{
				Company previousValue = this._CompanyAssociated.Entity;
				if (((previousValue != value) 
							|| (this._CompanyAssociated.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompanyAssociated.Entity = null;
						previousValue.Companies.Remove(this);
					}
					this._CompanyAssociated.Entity = value;
					if ((value != null))
					{
						value.Companies.Add(this);
						this._CompanyAssociated_Id = value.Id;
					}
					else
					{
						this._CompanyAssociated_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("CompanyAssociated");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompaniesType_Company", Storage="_CompaniesType", ThisKey="CompanyType_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CompaniesType CompaniesType
		{
			get
			{
				return this._CompaniesType.Entity;
			}
			set
			{
				CompaniesType previousValue = this._CompaniesType.Entity;
				if (((previousValue != value) 
							|| (this._CompaniesType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompaniesType.Entity = null;
						previousValue.Companies.Remove(this);
					}
					this._CompaniesType.Entity = value;
					if ((value != null))
					{
						value.Companies.Add(this);
						this._CompanyType_Id = value.Id;
					}
					else
					{
						this._CompanyType_Id = default(int);
					}
					this.SendPropertyChanged("CompaniesType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanySector_Company", Storage="_CompanySector", ThisKey="CompanySector_Id", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public CompanySector CompanySector
		{
			get
			{
				return this._CompanySector.Entity;
			}
			set
			{
				CompanySector previousValue = this._CompanySector.Entity;
				if (((previousValue != value) 
							|| (this._CompanySector.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompanySector.Entity = null;
						previousValue.Companies.Remove(this);
					}
					this._CompanySector.Entity = value;
					if ((value != null))
					{
						value.Companies.Add(this);
						this._CompanySector_Id = value.Id;
					}
					else
					{
						this._CompanySector_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("CompanySector");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Regions(Region entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Regions(Region entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Locations(Location entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Locations(Location entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_FunctionalOrganizationTypes(FunctionalOrganizationType entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_FunctionalOrganizationTypes(FunctionalOrganizationType entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_PositionLevels(PositionLevel entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_PositionLevels(PositionLevel entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.CompanyAssociated = this;
		}
		
		private void detach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.CompanyAssociated = null;
		}
		
		private void attach_Demos(Demo entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Demos(Demo entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Seniorities(Seniority entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Seniorities(Seniority entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_PerformanceEvaluations(PerformanceEvaluation entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_PerformanceEvaluations(PerformanceEvaluation entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_InstructionLevels(InstructionLevel entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_InstructionLevels(InstructionLevel entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Ages(Age entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Ages(Age entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_ClimateScales(ClimateScale entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_ClimateScales(ClimateScale entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Tests(Test entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Tests(Test entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Demos")]
	public partial class Demo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Weeks;
		
		private int _Company_Id;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnWeeksChanging(int value);
    partial void OnWeeksChanged();
    partial void OnCompany_IdChanging(int value);
    partial void OnCompany_IdChanged();
    #endregion
		
		public Demo()
		{
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weeks", DbType="Int NOT NULL")]
		public int Weeks
		{
			get
			{
				return this._Weeks;
			}
			set
			{
				if ((this._Weeks != value))
				{
					this.OnWeeksChanging(value);
					this.SendPropertyChanging();
					this._Weeks = value;
					this.SendPropertyChanged("Weeks");
					this.OnWeeksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Company_Id", DbType="Int NOT NULL")]
		public int Company_Id
		{
			get
			{
				return this._Company_Id;
			}
			set
			{
				if ((this._Company_Id != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompany_IdChanging(value);
					this.SendPropertyChanging();
					this._Company_Id = value;
					this.SendPropertyChanged("Company_Id");
					this.OnCompany_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Demo", Storage="_Company", ThisKey="Company_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Demos.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Demos.Add(this);
						this._Company_Id = value.Id;
					}
					else
					{
						this._Company_Id = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Seniorities")]
	public partial class Seniority : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _ShortName;
		
		private int _Company_Id;
		
		private System.Nullable<int> _Level;
		
		private EntitySet<Evaluation> _Evaluations;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    partial void OnCompany_IdChanging(int value);
    partial void OnCompany_IdChanged();
    partial void OnLevelChanging(System.Nullable<int> value);
    partial void OnLevelChanged();
    #endregion
		
		public Seniority()
		{
			this._Evaluations = new EntitySet<Evaluation>(new Action<Evaluation>(this.attach_Evaluations), new Action<Evaluation>(this.detach_Evaluations));
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Company_Id", DbType="Int NOT NULL")]
		public int Company_Id
		{
			get
			{
				return this._Company_Id;
			}
			set
			{
				if ((this._Company_Id != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompany_IdChanging(value);
					this.SendPropertyChanging();
					this._Company_Id = value;
					this.SendPropertyChanged("Company_Id");
					this.OnCompany_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Level]", Storage="_Level", DbType="Int")]
		public System.Nullable<int> Level
		{
			get
			{
				return this._Level;
			}
			set
			{
				if ((this._Level != value))
				{
					this.OnLevelChanging(value);
					this.SendPropertyChanging();
					this._Level = value;
					this.SendPropertyChanged("Level");
					this.OnLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Seniority_Evaluation", Storage="_Evaluations", ThisKey="Id", OtherKey="Seniority_Id")]
		public EntitySet<Evaluation> Evaluations
		{
			get
			{
				return this._Evaluations;
			}
			set
			{
				this._Evaluations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Seniority", Storage="_Company", ThisKey="Company_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Seniorities.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Seniorities.Add(this);
						this._Company_Id = value.Id;
					}
					else
					{
						this._Company_Id = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Evaluations(Evaluation entity)
		{
			this.SendPropertyChanging();
			entity.Seniority = this;
		}
		
		private void detach_Evaluations(Evaluation entity)
		{
			this.SendPropertyChanging();
			entity.Seniority = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PerformanceEvaluations")]
	public partial class PerformanceEvaluation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _ShortName;
		
		private int _Company_Id;
		
		private System.Nullable<int> _Level;
		
		private EntitySet<Evaluation> _Evaluations;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    partial void OnCompany_IdChanging(int value);
    partial void OnCompany_IdChanged();
    partial void OnLevelChanging(System.Nullable<int> value);
    partial void OnLevelChanged();
    #endregion
		
		public PerformanceEvaluation()
		{
			this._Evaluations = new EntitySet<Evaluation>(new Action<Evaluation>(this.attach_Evaluations), new Action<Evaluation>(this.detach_Evaluations));
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Company_Id", DbType="Int NOT NULL")]
		public int Company_Id
		{
			get
			{
				return this._Company_Id;
			}
			set
			{
				if ((this._Company_Id != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompany_IdChanging(value);
					this.SendPropertyChanging();
					this._Company_Id = value;
					this.SendPropertyChanged("Company_Id");
					this.OnCompany_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Level]", Storage="_Level", DbType="Int")]
		public System.Nullable<int> Level
		{
			get
			{
				return this._Level;
			}
			set
			{
				if ((this._Level != value))
				{
					this.OnLevelChanging(value);
					this.SendPropertyChanging();
					this._Level = value;
					this.SendPropertyChanged("Level");
					this.OnLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PerformanceEvaluation_Evaluation", Storage="_Evaluations", ThisKey="Id", OtherKey="Performance_Id")]
		public EntitySet<Evaluation> Evaluations
		{
			get
			{
				return this._Evaluations;
			}
			set
			{
				this._Evaluations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_PerformanceEvaluation", Storage="_Company", ThisKey="Company_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.PerformanceEvaluations.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.PerformanceEvaluations.Add(this);
						this._Company_Id = value.Id;
					}
					else
					{
						this._Company_Id = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Evaluations(Evaluation entity)
		{
			this.SendPropertyChanging();
			entity.PerformanceEvaluation = this;
		}
		
		private void detach_Evaluations(Evaluation entity)
		{
			this.SendPropertyChanging();
			entity.PerformanceEvaluation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InstructionLevels")]
	public partial class InstructionLevel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _ShortName;
		
		private int _Company_Id;
		
		private System.Nullable<int> _Level;
		
		private EntitySet<Evaluation> _Evaluations;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    partial void OnCompany_IdChanging(int value);
    partial void OnCompany_IdChanged();
    partial void OnLevelChanging(System.Nullable<int> value);
    partial void OnLevelChanged();
    #endregion
		
		public InstructionLevel()
		{
			this._Evaluations = new EntitySet<Evaluation>(new Action<Evaluation>(this.attach_Evaluations), new Action<Evaluation>(this.detach_Evaluations));
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Company_Id", DbType="Int NOT NULL")]
		public int Company_Id
		{
			get
			{
				return this._Company_Id;
			}
			set
			{
				if ((this._Company_Id != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompany_IdChanging(value);
					this.SendPropertyChanging();
					this._Company_Id = value;
					this.SendPropertyChanged("Company_Id");
					this.OnCompany_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Level]", Storage="_Level", DbType="Int")]
		public System.Nullable<int> Level
		{
			get
			{
				return this._Level;
			}
			set
			{
				if ((this._Level != value))
				{
					this.OnLevelChanging(value);
					this.SendPropertyChanging();
					this._Level = value;
					this.SendPropertyChanged("Level");
					this.OnLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InstructionLevel_Evaluation", Storage="_Evaluations", ThisKey="Id", OtherKey="InstructionLevel_Id")]
		public EntitySet<Evaluation> Evaluations
		{
			get
			{
				return this._Evaluations;
			}
			set
			{
				this._Evaluations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_InstructionLevel", Storage="_Company", ThisKey="Company_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.InstructionLevels.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.InstructionLevels.Add(this);
						this._Company_Id = value.Id;
					}
					else
					{
						this._Company_Id = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Evaluations(Evaluation entity)
		{
			this.SendPropertyChanging();
			entity.InstructionLevel = this;
		}
		
		private void detach_Evaluations(Evaluation entity)
		{
			this.SendPropertyChanging();
			entity.InstructionLevel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ages")]
	public partial class Age : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _ShortName;
		
		private int _Company_Id;
		
		private System.Nullable<int> _Level;
		
		private EntitySet<Evaluation> _Evaluations;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    partial void OnCompany_IdChanging(int value);
    partial void OnCompany_IdChanged();
    partial void OnLevelChanging(System.Nullable<int> value);
    partial void OnLevelChanged();
    #endregion
		
		public Age()
		{
			this._Evaluations = new EntitySet<Evaluation>(new Action<Evaluation>(this.attach_Evaluations), new Action<Evaluation>(this.detach_Evaluations));
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Company_Id", DbType="Int NOT NULL")]
		public int Company_Id
		{
			get
			{
				return this._Company_Id;
			}
			set
			{
				if ((this._Company_Id != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompany_IdChanging(value);
					this.SendPropertyChanging();
					this._Company_Id = value;
					this.SendPropertyChanged("Company_Id");
					this.OnCompany_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Level]", Storage="_Level", DbType="Int")]
		public System.Nullable<int> Level
		{
			get
			{
				return this._Level;
			}
			set
			{
				if ((this._Level != value))
				{
					this.OnLevelChanging(value);
					this.SendPropertyChanging();
					this._Level = value;
					this.SendPropertyChanged("Level");
					this.OnLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Age_Evaluation", Storage="_Evaluations", ThisKey="Id", OtherKey="Age_Id")]
		public EntitySet<Evaluation> Evaluations
		{
			get
			{
				return this._Evaluations;
			}
			set
			{
				this._Evaluations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Age", Storage="_Company", ThisKey="Company_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Ages.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Ages.Add(this);
						this._Company_Id = value.Id;
					}
					else
					{
						this._Company_Id = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Evaluations(Evaluation entity)
		{
			this.SendPropertyChanging();
			entity.Age = this;
		}
		
		private void detach_Evaluations(Evaluation entity)
		{
			this.SendPropertyChanging();
			entity.Age = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContactUs")]
	public partial class ContactUs : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Company;
		
		private string _Email;
		
		private string _Phone;
		
		private string _Address;
		
		private string _Description;
		
		private System.DateTime _Date;
		
		private int _Country_Id;
		
		private EntityRef<Country> _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnCountry_IdChanging(int value);
    partial void OnCountry_IdChanged();
    #endregion
		
		public ContactUs()
		{
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Company", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country_Id", DbType="Int NOT NULL")]
		public int Country_Id
		{
			get
			{
				return this._Country_Id;
			}
			set
			{
				if ((this._Country_Id != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountry_IdChanging(value);
					this.SendPropertyChanging();
					this._Country_Id = value;
					this.SendPropertyChanged("Country_Id");
					this.OnCountry_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_ContactUs", Storage="_Country", ThisKey="Country_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.ContactUs.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.ContactUs.Add(this);
						this._Country_Id = value.Id;
					}
					else
					{
						this._Country_Id = default(int);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ClimateRanges")]
	public partial class ClimateRange : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private decimal _MinValue;
		
		private decimal _MaxValue;
		
		private string _Color;
		
		private string _Action;
		
		private int _ClimateScale_Id;
		
		private EntityRef<ClimateScale> _ClimateScale;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnMinValueChanging(decimal value);
    partial void OnMinValueChanged();
    partial void OnMaxValueChanging(decimal value);
    partial void OnMaxValueChanged();
    partial void OnColorChanging(string value);
    partial void OnColorChanged();
    partial void OnActionChanging(string value);
    partial void OnActionChanged();
    partial void OnClimateScale_IdChanging(int value);
    partial void OnClimateScale_IdChanged();
    #endregion
		
		public ClimateRange()
		{
			this._ClimateScale = default(EntityRef<ClimateScale>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinValue", DbType="Decimal(18,3) NOT NULL")]
		public decimal MinValue
		{
			get
			{
				return this._MinValue;
			}
			set
			{
				if ((this._MinValue != value))
				{
					this.OnMinValueChanging(value);
					this.SendPropertyChanging();
					this._MinValue = value;
					this.SendPropertyChanged("MinValue");
					this.OnMinValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxValue", DbType="Decimal(18,3) NOT NULL")]
		public decimal MaxValue
		{
			get
			{
				return this._MaxValue;
			}
			set
			{
				if ((this._MaxValue != value))
				{
					this.OnMaxValueChanging(value);
					this.SendPropertyChanging();
					this._MaxValue = value;
					this.SendPropertyChanged("MaxValue");
					this.OnMaxValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Color", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Color
		{
			get
			{
				return this._Color;
			}
			set
			{
				if ((this._Color != value))
				{
					this.OnColorChanging(value);
					this.SendPropertyChanging();
					this._Color = value;
					this.SendPropertyChanged("Color");
					this.OnColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Action", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string Action
		{
			get
			{
				return this._Action;
			}
			set
			{
				if ((this._Action != value))
				{
					this.OnActionChanging(value);
					this.SendPropertyChanging();
					this._Action = value;
					this.SendPropertyChanged("Action");
					this.OnActionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClimateScale_Id", DbType="Int NOT NULL")]
		public int ClimateScale_Id
		{
			get
			{
				return this._ClimateScale_Id;
			}
			set
			{
				if ((this._ClimateScale_Id != value))
				{
					if (this._ClimateScale.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClimateScale_IdChanging(value);
					this.SendPropertyChanging();
					this._ClimateScale_Id = value;
					this.SendPropertyChanged("ClimateScale_Id");
					this.OnClimateScale_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClimateScale_ClimateRange", Storage="_ClimateScale", ThisKey="ClimateScale_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ClimateScale ClimateScale
		{
			get
			{
				return this._ClimateScale.Entity;
			}
			set
			{
				ClimateScale previousValue = this._ClimateScale.Entity;
				if (((previousValue != value) 
							|| (this._ClimateScale.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClimateScale.Entity = null;
						previousValue.ClimateRanges.Remove(this);
					}
					this._ClimateScale.Entity = value;
					if ((value != null))
					{
						value.ClimateRanges.Add(this);
						this._ClimateScale_Id = value.Id;
					}
					else
					{
						this._ClimateScale_Id = default(int);
					}
					this.SendPropertyChanged("ClimateScale");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ClimateScales")]
	public partial class ClimateScale : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Description;
		
		private int _Company_Id;
		
		private EntitySet<ClimateRange> _ClimateRanges;
		
		private EntitySet<Test> _Tests;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCompany_IdChanging(int value);
    partial void OnCompany_IdChanged();
    #endregion
		
		public ClimateScale()
		{
			this._ClimateRanges = new EntitySet<ClimateRange>(new Action<ClimateRange>(this.attach_ClimateRanges), new Action<ClimateRange>(this.detach_ClimateRanges));
			this._Tests = new EntitySet<Test>(new Action<Test>(this.attach_Tests), new Action<Test>(this.detach_Tests));
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Company_Id", DbType="Int NOT NULL")]
		public int Company_Id
		{
			get
			{
				return this._Company_Id;
			}
			set
			{
				if ((this._Company_Id != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompany_IdChanging(value);
					this.SendPropertyChanging();
					this._Company_Id = value;
					this.SendPropertyChanged("Company_Id");
					this.OnCompany_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClimateScale_ClimateRange", Storage="_ClimateRanges", ThisKey="Id", OtherKey="ClimateScale_Id")]
		public EntitySet<ClimateRange> ClimateRanges
		{
			get
			{
				return this._ClimateRanges;
			}
			set
			{
				this._ClimateRanges.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClimateScale_Test", Storage="_Tests", ThisKey="Id", OtherKey="ClimateScale_Id")]
		public EntitySet<Test> Tests
		{
			get
			{
				return this._Tests;
			}
			set
			{
				this._Tests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_ClimateScale", Storage="_Company", ThisKey="Company_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.ClimateScales.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.ClimateScales.Add(this);
						this._Company_Id = value.Id;
					}
					else
					{
						this._Company_Id = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ClimateRanges(ClimateRange entity)
		{
			this.SendPropertyChanging();
			entity.ClimateScale = this;
		}
		
		private void detach_ClimateRanges(ClimateRange entity)
		{
			this.SendPropertyChanging();
			entity.ClimateScale = null;
		}
		
		private void attach_Tests(Test entity)
		{
			this.SendPropertyChanging();
			entity.ClimateScale = this;
		}
		
		private void detach_Tests(Test entity)
		{
			this.SendPropertyChanging();
			entity.ClimateScale = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DichotomousAnswers")]
	public partial class DichotomousAnswer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private bool _Affirmative;
		
		private System.DateTime _CreationDate;
		
		private int _Question_Id;
		
		private int _Evaluation_Id;
		
		private EntityRef<Evaluation> _Evaluation;
		
		private EntityRef<Question> _Question;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnAffirmativeChanging(bool value);
    partial void OnAffirmativeChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnQuestion_IdChanging(int value);
    partial void OnQuestion_IdChanged();
    partial void OnEvaluation_IdChanging(int value);
    partial void OnEvaluation_IdChanged();
    #endregion
		
		public DichotomousAnswer()
		{
			this._Evaluation = default(EntityRef<Evaluation>);
			this._Question = default(EntityRef<Question>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Affirmative", DbType="Bit NOT NULL")]
		public bool Affirmative
		{
			get
			{
				return this._Affirmative;
			}
			set
			{
				if ((this._Affirmative != value))
				{
					this.OnAffirmativeChanging(value);
					this.SendPropertyChanging();
					this._Affirmative = value;
					this.SendPropertyChanged("Affirmative");
					this.OnAffirmativeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Question_Id", DbType="Int NOT NULL")]
		public int Question_Id
		{
			get
			{
				return this._Question_Id;
			}
			set
			{
				if ((this._Question_Id != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestion_IdChanging(value);
					this.SendPropertyChanging();
					this._Question_Id = value;
					this.SendPropertyChanged("Question_Id");
					this.OnQuestion_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Evaluation_Id", DbType="Int NOT NULL")]
		public int Evaluation_Id
		{
			get
			{
				return this._Evaluation_Id;
			}
			set
			{
				if ((this._Evaluation_Id != value))
				{
					if (this._Evaluation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEvaluation_IdChanging(value);
					this.SendPropertyChanging();
					this._Evaluation_Id = value;
					this.SendPropertyChanged("Evaluation_Id");
					this.OnEvaluation_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Evaluation_DichotomousAnswer", Storage="_Evaluation", ThisKey="Evaluation_Id", OtherKey="Id", IsForeignKey=true)]
		public Evaluation Evaluation
		{
			get
			{
				return this._Evaluation.Entity;
			}
			set
			{
				Evaluation previousValue = this._Evaluation.Entity;
				if (((previousValue != value) 
							|| (this._Evaluation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Evaluation.Entity = null;
						previousValue.DichotomousAnswers.Remove(this);
					}
					this._Evaluation.Entity = value;
					if ((value != null))
					{
						value.DichotomousAnswers.Add(this);
						this._Evaluation_Id = value.Id;
					}
					else
					{
						this._Evaluation_Id = default(int);
					}
					this.SendPropertyChanged("Evaluation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_DichotomousAnswer", Storage="_Question", ThisKey="Question_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.DichotomousAnswers.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.DichotomousAnswers.Add(this);
						this._Question_Id = value.Id;
					}
					else
					{
						this._Question_Id = default(int);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DemographicSelectorDetails")]
	public partial class DemographicSelectorDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Demographic_Id;
		
		private int _SelectorValue_Id;
		
		private int _Questionnaire_Id;
		
		private int _Test_Id;
		
		private EntityRef<Questionnaire> _Questionnaire;
		
		private EntityRef<Demographic> _Demographic;
		
		private EntityRef<Test> _Test;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDemographic_IdChanging(int value);
    partial void OnDemographic_IdChanged();
    partial void OnSelectorValue_IdChanging(int value);
    partial void OnSelectorValue_IdChanged();
    partial void OnQuestionnaire_IdChanging(int value);
    partial void OnQuestionnaire_IdChanged();
    partial void OnTest_IdChanging(int value);
    partial void OnTest_IdChanged();
    #endregion
		
		public DemographicSelectorDetail()
		{
			this._Questionnaire = default(EntityRef<Questionnaire>);
			this._Demographic = default(EntityRef<Demographic>);
			this._Test = default(EntityRef<Test>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Demographic_Id", DbType="Int NOT NULL")]
		public int Demographic_Id
		{
			get
			{
				return this._Demographic_Id;
			}
			set
			{
				if ((this._Demographic_Id != value))
				{
					if (this._Demographic.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDemographic_IdChanging(value);
					this.SendPropertyChanging();
					this._Demographic_Id = value;
					this.SendPropertyChanged("Demographic_Id");
					this.OnDemographic_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SelectorValue_Id", DbType="Int NOT NULL")]
		public int SelectorValue_Id
		{
			get
			{
				return this._SelectorValue_Id;
			}
			set
			{
				if ((this._SelectorValue_Id != value))
				{
					this.OnSelectorValue_IdChanging(value);
					this.SendPropertyChanging();
					this._SelectorValue_Id = value;
					this.SendPropertyChanged("SelectorValue_Id");
					this.OnSelectorValue_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Questionnaire_Id", DbType="Int NOT NULL")]
		public int Questionnaire_Id
		{
			get
			{
				return this._Questionnaire_Id;
			}
			set
			{
				if ((this._Questionnaire_Id != value))
				{
					if (this._Questionnaire.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionnaire_IdChanging(value);
					this.SendPropertyChanging();
					this._Questionnaire_Id = value;
					this.SendPropertyChanged("Questionnaire_Id");
					this.OnQuestionnaire_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Test_Id", DbType="Int NOT NULL")]
		public int Test_Id
		{
			get
			{
				return this._Test_Id;
			}
			set
			{
				if ((this._Test_Id != value))
				{
					if (this._Test.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTest_IdChanging(value);
					this.SendPropertyChanging();
					this._Test_Id = value;
					this.SendPropertyChanged("Test_Id");
					this.OnTest_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Questionnaire_DemographicSelectorDetail", Storage="_Questionnaire", ThisKey="Questionnaire_Id", OtherKey="Id", IsForeignKey=true)]
		public Questionnaire Questionnaire
		{
			get
			{
				return this._Questionnaire.Entity;
			}
			set
			{
				Questionnaire previousValue = this._Questionnaire.Entity;
				if (((previousValue != value) 
							|| (this._Questionnaire.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Questionnaire.Entity = null;
						previousValue.DemographicSelectorDetails.Remove(this);
					}
					this._Questionnaire.Entity = value;
					if ((value != null))
					{
						value.DemographicSelectorDetails.Add(this);
						this._Questionnaire_Id = value.Id;
					}
					else
					{
						this._Questionnaire_Id = default(int);
					}
					this.SendPropertyChanged("Questionnaire");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Demographic_DemographicSelectorDetail", Storage="_Demographic", ThisKey="Demographic_Id", OtherKey="Id", IsForeignKey=true)]
		public Demographic Demographic
		{
			get
			{
				return this._Demographic.Entity;
			}
			set
			{
				Demographic previousValue = this._Demographic.Entity;
				if (((previousValue != value) 
							|| (this._Demographic.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Demographic.Entity = null;
						previousValue.DemographicSelectorDetails.Remove(this);
					}
					this._Demographic.Entity = value;
					if ((value != null))
					{
						value.DemographicSelectorDetails.Add(this);
						this._Demographic_Id = value.Id;
					}
					else
					{
						this._Demographic_Id = default(int);
					}
					this.SendPropertyChanged("Demographic");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_DemographicSelectorDetail", Storage="_Test", ThisKey="Test_Id", OtherKey="Id", IsForeignKey=true)]
		public Test Test
		{
			get
			{
				return this._Test.Entity;
			}
			set
			{
				Test previousValue = this._Test.Entity;
				if (((previousValue != value) 
							|| (this._Test.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Test.Entity = null;
						previousValue.DemographicSelectorDetails.Remove(this);
					}
					this._Test.Entity = value;
					if ((value != null))
					{
						value.DemographicSelectorDetails.Add(this);
						this._Test_Id = value.Id;
					}
					else
					{
						this._Test_Id = default(int);
					}
					this.SendPropertyChanged("Test");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Weighings")]
	public partial class Weighing : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Category_Id;
		
		private int _Test_Id;
		
		private decimal _Value;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<Test> _Test;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCategory_IdChanging(int value);
    partial void OnCategory_IdChanged();
    partial void OnTest_IdChanging(int value);
    partial void OnTest_IdChanged();
    partial void OnValueChanging(decimal value);
    partial void OnValueChanged();
    #endregion
		
		public Weighing()
		{
			this._Category = default(EntityRef<Category>);
			this._Test = default(EntityRef<Test>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category_Id", DbType="Int NOT NULL")]
		public int Category_Id
		{
			get
			{
				return this._Category_Id;
			}
			set
			{
				if ((this._Category_Id != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategory_IdChanging(value);
					this.SendPropertyChanging();
					this._Category_Id = value;
					this.SendPropertyChanged("Category_Id");
					this.OnCategory_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Test_Id", DbType="Int NOT NULL")]
		public int Test_Id
		{
			get
			{
				return this._Test_Id;
			}
			set
			{
				if ((this._Test_Id != value))
				{
					if (this._Test.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTest_IdChanging(value);
					this.SendPropertyChanging();
					this._Test_Id = value;
					this.SendPropertyChanged("Test_Id");
					this.OnTest_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Decimal(18,3) NOT NULL")]
		public decimal Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Weighing", Storage="_Category", ThisKey="Category_Id", OtherKey="Id", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Weighings.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Weighings.Add(this);
						this._Category_Id = value.Id;
					}
					else
					{
						this._Category_Id = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_Weighing", Storage="_Test", ThisKey="Test_Id", OtherKey="Id", IsForeignKey=true)]
		public Test Test
		{
			get
			{
				return this._Test.Entity;
			}
			set
			{
				Test previousValue = this._Test.Entity;
				if (((previousValue != value) 
							|| (this._Test.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Test.Entity = null;
						previousValue.Weighings.Remove(this);
					}
					this._Test.Entity = value;
					if ((value != null))
					{
						value.Weighings.Add(this);
						this._Test_Id = value.Id;
					}
					else
					{
						this._Test_Id = default(int);
					}
					this.SendPropertyChanged("Test");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Evaluations")]
	public partial class Evaluation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _CreationDate;
		
		private string _IpAddress;
		
		private string _RemoteHostName;
		
		private string _RemoteUserName;
		
		private string _Sex;
		
		private System.Nullable<int> _Age_Id;
		
		private System.Nullable<int> _InstructionLevel_Id;
		
		private System.Nullable<int> _PositionLevel_Id;
		
		private System.Nullable<int> _Seniority_Id;
		
		private int _Test_Id;
		
		private System.Nullable<int> _Location_Id;
		
		private System.Nullable<int> _Performance_Id;
		
		private EntitySet<TextAnswer> _TextAnswers;
		
		private EntitySet<SelectionAnswer> _SelectionAnswers;
		
		private EntitySet<EvaluationFO> _EvaluationFOs;
		
		private EntitySet<DichotomousAnswer> _DichotomousAnswers;
		
		private EntitySet<Ticket> _Tickets;
		
		private EntityRef<Age> _Age;
		
		private EntityRef<InstructionLevel> _InstructionLevel;
		
		private EntityRef<Location> _Location;
		
		private EntityRef<PerformanceEvaluation> _PerformanceEvaluation;
		
		private EntityRef<PositionLevel> _PositionLevel;
		
		private EntityRef<Seniority> _Seniority;
		
		private EntityRef<Test> _Test;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnIpAddressChanging(string value);
    partial void OnIpAddressChanged();
    partial void OnRemoteHostNameChanging(string value);
    partial void OnRemoteHostNameChanged();
    partial void OnRemoteUserNameChanging(string value);
    partial void OnRemoteUserNameChanged();
    partial void OnSexChanging(string value);
    partial void OnSexChanged();
    partial void OnAge_IdChanging(System.Nullable<int> value);
    partial void OnAge_IdChanged();
    partial void OnInstructionLevel_IdChanging(System.Nullable<int> value);
    partial void OnInstructionLevel_IdChanged();
    partial void OnPositionLevel_IdChanging(System.Nullable<int> value);
    partial void OnPositionLevel_IdChanged();
    partial void OnSeniority_IdChanging(System.Nullable<int> value);
    partial void OnSeniority_IdChanged();
    partial void OnTest_IdChanging(int value);
    partial void OnTest_IdChanged();
    partial void OnLocation_IdChanging(System.Nullable<int> value);
    partial void OnLocation_IdChanged();
    partial void OnPerformance_IdChanging(System.Nullable<int> value);
    partial void OnPerformance_IdChanged();
    #endregion
		
		public Evaluation()
		{
			this._TextAnswers = new EntitySet<TextAnswer>(new Action<TextAnswer>(this.attach_TextAnswers), new Action<TextAnswer>(this.detach_TextAnswers));
			this._SelectionAnswers = new EntitySet<SelectionAnswer>(new Action<SelectionAnswer>(this.attach_SelectionAnswers), new Action<SelectionAnswer>(this.detach_SelectionAnswers));
			this._EvaluationFOs = new EntitySet<EvaluationFO>(new Action<EvaluationFO>(this.attach_EvaluationFOs), new Action<EvaluationFO>(this.detach_EvaluationFOs));
			this._DichotomousAnswers = new EntitySet<DichotomousAnswer>(new Action<DichotomousAnswer>(this.attach_DichotomousAnswers), new Action<DichotomousAnswer>(this.detach_DichotomousAnswers));
			this._Tickets = new EntitySet<Ticket>(new Action<Ticket>(this.attach_Tickets), new Action<Ticket>(this.detach_Tickets));
			this._Age = default(EntityRef<Age>);
			this._InstructionLevel = default(EntityRef<InstructionLevel>);
			this._Location = default(EntityRef<Location>);
			this._PerformanceEvaluation = default(EntityRef<PerformanceEvaluation>);
			this._PositionLevel = default(EntityRef<PositionLevel>);
			this._Seniority = default(EntityRef<Seniority>);
			this._Test = default(EntityRef<Test>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IpAddress", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string IpAddress
		{
			get
			{
				return this._IpAddress;
			}
			set
			{
				if ((this._IpAddress != value))
				{
					this.OnIpAddressChanging(value);
					this.SendPropertyChanging();
					this._IpAddress = value;
					this.SendPropertyChanged("IpAddress");
					this.OnIpAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemoteHostName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string RemoteHostName
		{
			get
			{
				return this._RemoteHostName;
			}
			set
			{
				if ((this._RemoteHostName != value))
				{
					this.OnRemoteHostNameChanging(value);
					this.SendPropertyChanging();
					this._RemoteHostName = value;
					this.SendPropertyChanged("RemoteHostName");
					this.OnRemoteHostNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemoteUserName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string RemoteUserName
		{
			get
			{
				return this._RemoteUserName;
			}
			set
			{
				if ((this._RemoteUserName != value))
				{
					this.OnRemoteUserNameChanging(value);
					this.SendPropertyChanging();
					this._RemoteUserName = value;
					this.SendPropertyChanged("RemoteUserName");
					this.OnRemoteUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sex", DbType="VarChar(10)")]
		public string Sex
		{
			get
			{
				return this._Sex;
			}
			set
			{
				if ((this._Sex != value))
				{
					this.OnSexChanging(value);
					this.SendPropertyChanging();
					this._Sex = value;
					this.SendPropertyChanged("Sex");
					this.OnSexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Age_Id", DbType="Int")]
		public System.Nullable<int> Age_Id
		{
			get
			{
				return this._Age_Id;
			}
			set
			{
				if ((this._Age_Id != value))
				{
					if (this._Age.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAge_IdChanging(value);
					this.SendPropertyChanging();
					this._Age_Id = value;
					this.SendPropertyChanged("Age_Id");
					this.OnAge_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstructionLevel_Id", DbType="Int")]
		public System.Nullable<int> InstructionLevel_Id
		{
			get
			{
				return this._InstructionLevel_Id;
			}
			set
			{
				if ((this._InstructionLevel_Id != value))
				{
					if (this._InstructionLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstructionLevel_IdChanging(value);
					this.SendPropertyChanging();
					this._InstructionLevel_Id = value;
					this.SendPropertyChanged("InstructionLevel_Id");
					this.OnInstructionLevel_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionLevel_Id", DbType="Int")]
		public System.Nullable<int> PositionLevel_Id
		{
			get
			{
				return this._PositionLevel_Id;
			}
			set
			{
				if ((this._PositionLevel_Id != value))
				{
					if (this._PositionLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPositionLevel_IdChanging(value);
					this.SendPropertyChanging();
					this._PositionLevel_Id = value;
					this.SendPropertyChanged("PositionLevel_Id");
					this.OnPositionLevel_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Seniority_Id", DbType="Int")]
		public System.Nullable<int> Seniority_Id
		{
			get
			{
				return this._Seniority_Id;
			}
			set
			{
				if ((this._Seniority_Id != value))
				{
					if (this._Seniority.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSeniority_IdChanging(value);
					this.SendPropertyChanging();
					this._Seniority_Id = value;
					this.SendPropertyChanged("Seniority_Id");
					this.OnSeniority_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Test_Id", DbType="Int NOT NULL")]
		public int Test_Id
		{
			get
			{
				return this._Test_Id;
			}
			set
			{
				if ((this._Test_Id != value))
				{
					if (this._Test.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTest_IdChanging(value);
					this.SendPropertyChanging();
					this._Test_Id = value;
					this.SendPropertyChanged("Test_Id");
					this.OnTest_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location_Id", DbType="Int")]
		public System.Nullable<int> Location_Id
		{
			get
			{
				return this._Location_Id;
			}
			set
			{
				if ((this._Location_Id != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocation_IdChanging(value);
					this.SendPropertyChanging();
					this._Location_Id = value;
					this.SendPropertyChanged("Location_Id");
					this.OnLocation_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Performance_Id", DbType="Int")]
		public System.Nullable<int> Performance_Id
		{
			get
			{
				return this._Performance_Id;
			}
			set
			{
				if ((this._Performance_Id != value))
				{
					if (this._PerformanceEvaluation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPerformance_IdChanging(value);
					this.SendPropertyChanging();
					this._Performance_Id = value;
					this.SendPropertyChanged("Performance_Id");
					this.OnPerformance_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Evaluation_TextAnswer", Storage="_TextAnswers", ThisKey="Id", OtherKey="Evaluation_Id")]
		public EntitySet<TextAnswer> TextAnswers
		{
			get
			{
				return this._TextAnswers;
			}
			set
			{
				this._TextAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Evaluation_SelectionAnswer", Storage="_SelectionAnswers", ThisKey="Id", OtherKey="Evaluation_Id")]
		public EntitySet<SelectionAnswer> SelectionAnswers
		{
			get
			{
				return this._SelectionAnswers;
			}
			set
			{
				this._SelectionAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Evaluation_EvaluationFO", Storage="_EvaluationFOs", ThisKey="Id", OtherKey="Evaluation_Id")]
		public EntitySet<EvaluationFO> EvaluationFOs
		{
			get
			{
				return this._EvaluationFOs;
			}
			set
			{
				this._EvaluationFOs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Evaluation_DichotomousAnswer", Storage="_DichotomousAnswers", ThisKey="Id", OtherKey="Evaluation_Id")]
		public EntitySet<DichotomousAnswer> DichotomousAnswers
		{
			get
			{
				return this._DichotomousAnswers;
			}
			set
			{
				this._DichotomousAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Evaluation_Ticket", Storage="_Tickets", ThisKey="Id", OtherKey="Evaluation_Id")]
		public EntitySet<Ticket> Tickets
		{
			get
			{
				return this._Tickets;
			}
			set
			{
				this._Tickets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Age_Evaluation", Storage="_Age", ThisKey="Age_Id", OtherKey="Id", IsForeignKey=true)]
		public Age Age
		{
			get
			{
				return this._Age.Entity;
			}
			set
			{
				Age previousValue = this._Age.Entity;
				if (((previousValue != value) 
							|| (this._Age.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Age.Entity = null;
						previousValue.Evaluations.Remove(this);
					}
					this._Age.Entity = value;
					if ((value != null))
					{
						value.Evaluations.Add(this);
						this._Age_Id = value.Id;
					}
					else
					{
						this._Age_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Age");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InstructionLevel_Evaluation", Storage="_InstructionLevel", ThisKey="InstructionLevel_Id", OtherKey="Id", IsForeignKey=true)]
		public InstructionLevel InstructionLevel
		{
			get
			{
				return this._InstructionLevel.Entity;
			}
			set
			{
				InstructionLevel previousValue = this._InstructionLevel.Entity;
				if (((previousValue != value) 
							|| (this._InstructionLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InstructionLevel.Entity = null;
						previousValue.Evaluations.Remove(this);
					}
					this._InstructionLevel.Entity = value;
					if ((value != null))
					{
						value.Evaluations.Add(this);
						this._InstructionLevel_Id = value.Id;
					}
					else
					{
						this._InstructionLevel_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("InstructionLevel");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Evaluation", Storage="_Location", ThisKey="Location_Id", OtherKey="Id", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.Evaluations.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.Evaluations.Add(this);
						this._Location_Id = value.Id;
					}
					else
					{
						this._Location_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PerformanceEvaluation_Evaluation", Storage="_PerformanceEvaluation", ThisKey="Performance_Id", OtherKey="Id", IsForeignKey=true)]
		public PerformanceEvaluation PerformanceEvaluation
		{
			get
			{
				return this._PerformanceEvaluation.Entity;
			}
			set
			{
				PerformanceEvaluation previousValue = this._PerformanceEvaluation.Entity;
				if (((previousValue != value) 
							|| (this._PerformanceEvaluation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PerformanceEvaluation.Entity = null;
						previousValue.Evaluations.Remove(this);
					}
					this._PerformanceEvaluation.Entity = value;
					if ((value != null))
					{
						value.Evaluations.Add(this);
						this._Performance_Id = value.Id;
					}
					else
					{
						this._Performance_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("PerformanceEvaluation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PositionLevel_Evaluation", Storage="_PositionLevel", ThisKey="PositionLevel_Id", OtherKey="Id", IsForeignKey=true)]
		public PositionLevel PositionLevel
		{
			get
			{
				return this._PositionLevel.Entity;
			}
			set
			{
				PositionLevel previousValue = this._PositionLevel.Entity;
				if (((previousValue != value) 
							|| (this._PositionLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PositionLevel.Entity = null;
						previousValue.Evaluations.Remove(this);
					}
					this._PositionLevel.Entity = value;
					if ((value != null))
					{
						value.Evaluations.Add(this);
						this._PositionLevel_Id = value.Id;
					}
					else
					{
						this._PositionLevel_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("PositionLevel");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Seniority_Evaluation", Storage="_Seniority", ThisKey="Seniority_Id", OtherKey="Id", IsForeignKey=true)]
		public Seniority Seniority
		{
			get
			{
				return this._Seniority.Entity;
			}
			set
			{
				Seniority previousValue = this._Seniority.Entity;
				if (((previousValue != value) 
							|| (this._Seniority.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Seniority.Entity = null;
						previousValue.Evaluations.Remove(this);
					}
					this._Seniority.Entity = value;
					if ((value != null))
					{
						value.Evaluations.Add(this);
						this._Seniority_Id = value.Id;
					}
					else
					{
						this._Seniority_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Seniority");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_Evaluation", Storage="_Test", ThisKey="Test_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Test Test
		{
			get
			{
				return this._Test.Entity;
			}
			set
			{
				Test previousValue = this._Test.Entity;
				if (((previousValue != value) 
							|| (this._Test.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Test.Entity = null;
						previousValue.Evaluations.Remove(this);
					}
					this._Test.Entity = value;
					if ((value != null))
					{
						value.Evaluations.Add(this);
						this._Test_Id = value.Id;
					}
					else
					{
						this._Test_Id = default(int);
					}
					this.SendPropertyChanged("Test");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TextAnswers(TextAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Evaluation = this;
		}
		
		private void detach_TextAnswers(TextAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Evaluation = null;
		}
		
		private void attach_SelectionAnswers(SelectionAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Evaluation = this;
		}
		
		private void detach_SelectionAnswers(SelectionAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Evaluation = null;
		}
		
		private void attach_EvaluationFOs(EvaluationFO entity)
		{
			this.SendPropertyChanging();
			entity.Evaluation = this;
		}
		
		private void detach_EvaluationFOs(EvaluationFO entity)
		{
			this.SendPropertyChanging();
			entity.Evaluation = null;
		}
		
		private void attach_DichotomousAnswers(DichotomousAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Evaluation = this;
		}
		
		private void detach_DichotomousAnswers(DichotomousAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Evaluation = null;
		}
		
		private void attach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.Evaluation = this;
		}
		
		private void detach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.Evaluation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FunctionalOrganization")]
	public partial class FunctionalOrganization : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _ShortName;
		
		private int _Type_Id;
		
		private System.Nullable<int> _FOParent_Id;
		
		private EntitySet<EvaluationFO> _EvaluationFOs;
		
		private EntitySet<FunctionalOrganization> _FunctionalOrganizations;
		
		private EntityRef<FunctionalOrganizationType> _FunctionalOrganizationType;
		
		private EntityRef<FunctionalOrganization> _Parent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    partial void OnType_IdChanging(int value);
    partial void OnType_IdChanged();
    partial void OnFOParent_IdChanging(System.Nullable<int> value);
    partial void OnFOParent_IdChanged();
    #endregion
		
		public FunctionalOrganization()
		{
			this._EvaluationFOs = new EntitySet<EvaluationFO>(new Action<EvaluationFO>(this.attach_EvaluationFOs), new Action<EvaluationFO>(this.detach_EvaluationFOs));
			this._FunctionalOrganizations = new EntitySet<FunctionalOrganization>(new Action<FunctionalOrganization>(this.attach_FunctionalOrganizations), new Action<FunctionalOrganization>(this.detach_FunctionalOrganizations));
			this._FunctionalOrganizationType = default(EntityRef<FunctionalOrganizationType>);
			this._Parent = default(EntityRef<FunctionalOrganization>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type_Id", DbType="Int NOT NULL")]
		public int Type_Id
		{
			get
			{
				return this._Type_Id;
			}
			set
			{
				if ((this._Type_Id != value))
				{
					if (this._FunctionalOrganizationType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnType_IdChanging(value);
					this.SendPropertyChanging();
					this._Type_Id = value;
					this.SendPropertyChanged("Type_Id");
					this.OnType_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FOParent_Id", DbType="Int")]
		public System.Nullable<int> FOParent_Id
		{
			get
			{
				return this._FOParent_Id;
			}
			set
			{
				if ((this._FOParent_Id != value))
				{
					if (this._Parent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFOParent_IdChanging(value);
					this.SendPropertyChanging();
					this._FOParent_Id = value;
					this.SendPropertyChanged("FOParent_Id");
					this.OnFOParent_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FunctionalOrganization_EvaluationFO", Storage="_EvaluationFOs", ThisKey="Id", OtherKey="FunctionalOrganization_Id")]
		public EntitySet<EvaluationFO> EvaluationFOs
		{
			get
			{
				return this._EvaluationFOs;
			}
			set
			{
				this._EvaluationFOs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FunctionalOrganization_FunctionalOrganization", Storage="_FunctionalOrganizations", ThisKey="Id", OtherKey="FOParent_Id")]
		public EntitySet<FunctionalOrganization> FunctionalOrganizations
		{
			get
			{
				return this._FunctionalOrganizations;
			}
			set
			{
				this._FunctionalOrganizations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FunctionalOrganizationType_FunctionalOrganization", Storage="_FunctionalOrganizationType", ThisKey="Type_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public FunctionalOrganizationType FunctionalOrganizationType
		{
			get
			{
				return this._FunctionalOrganizationType.Entity;
			}
			set
			{
				FunctionalOrganizationType previousValue = this._FunctionalOrganizationType.Entity;
				if (((previousValue != value) 
							|| (this._FunctionalOrganizationType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FunctionalOrganizationType.Entity = null;
						previousValue.FunctionalOrganizations.Remove(this);
					}
					this._FunctionalOrganizationType.Entity = value;
					if ((value != null))
					{
						value.FunctionalOrganizations.Add(this);
						this._Type_Id = value.Id;
					}
					else
					{
						this._Type_Id = default(int);
					}
					this.SendPropertyChanged("FunctionalOrganizationType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FunctionalOrganization_FunctionalOrganization", Storage="_Parent", ThisKey="FOParent_Id", OtherKey="Id", IsForeignKey=true)]
		public FunctionalOrganization Parent
		{
			get
			{
				return this._Parent.Entity;
			}
			set
			{
				FunctionalOrganization previousValue = this._Parent.Entity;
				if (((previousValue != value) 
							|| (this._Parent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parent.Entity = null;
						previousValue.FunctionalOrganizations.Remove(this);
					}
					this._Parent.Entity = value;
					if ((value != null))
					{
						value.FunctionalOrganizations.Add(this);
						this._FOParent_Id = value.Id;
					}
					else
					{
						this._FOParent_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Parent");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EvaluationFOs(EvaluationFO entity)
		{
			this.SendPropertyChanging();
			entity.FunctionalOrganization = this;
		}
		
		private void detach_EvaluationFOs(EvaluationFO entity)
		{
			this.SendPropertyChanging();
			entity.FunctionalOrganization = null;
		}
		
		private void attach_FunctionalOrganizations(FunctionalOrganization entity)
		{
			this.SendPropertyChanging();
			entity.Parent = this;
		}
		
		private void detach_FunctionalOrganizations(FunctionalOrganization entity)
		{
			this.SendPropertyChanging();
			entity.Parent = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Categories")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.Nullable<int> _Questionnaire_Id;
		
		private System.DateTime _CreationDate;
		
		private int _User_Id;
		
		private string _Description;
		
		private System.Nullable<int> _CategoryGroup_Id;
		
		private System.Nullable<int> _Company_Id;
		
		private EntitySet<Weighing> _Weighings;
		
		private EntitySet<Category> _Categories;
		
		private EntitySet<Question> _Questions;
		
		private EntityRef<Category> _GroupingCategory;
		
		private EntityRef<Questionnaire> _Questionnaire;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnQuestionnaire_IdChanging(System.Nullable<int> value);
    partial void OnQuestionnaire_IdChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnUser_IdChanging(int value);
    partial void OnUser_IdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCategoryGroup_IdChanging(System.Nullable<int> value);
    partial void OnCategoryGroup_IdChanged();
    partial void OnCompany_IdChanging(System.Nullable<int> value);
    partial void OnCompany_IdChanged();
    #endregion
		
		public Category()
		{
			this._Weighings = new EntitySet<Weighing>(new Action<Weighing>(this.attach_Weighings), new Action<Weighing>(this.detach_Weighings));
			this._Categories = new EntitySet<Category>(new Action<Category>(this.attach_Categories), new Action<Category>(this.detach_Categories));
			this._Questions = new EntitySet<Question>(new Action<Question>(this.attach_Questions), new Action<Question>(this.detach_Questions));
			this._GroupingCategory = default(EntityRef<Category>);
			this._Questionnaire = default(EntityRef<Questionnaire>);
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Questionnaire_Id", DbType="Int")]
		public System.Nullable<int> Questionnaire_Id
		{
			get
			{
				return this._Questionnaire_Id;
			}
			set
			{
				if ((this._Questionnaire_Id != value))
				{
					if (this._Questionnaire.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionnaire_IdChanging(value);
					this.SendPropertyChanging();
					this._Questionnaire_Id = value;
					this.SendPropertyChanged("Questionnaire_Id");
					this.OnQuestionnaire_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Id", DbType="Int NOT NULL")]
		public int User_Id
		{
			get
			{
				return this._User_Id;
			}
			set
			{
				if ((this._User_Id != value))
				{
					this.OnUser_IdChanging(value);
					this.SendPropertyChanging();
					this._User_Id = value;
					this.SendPropertyChanged("User_Id");
					this.OnUser_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryGroup_Id", DbType="Int")]
		public System.Nullable<int> CategoryGroup_Id
		{
			get
			{
				return this._CategoryGroup_Id;
			}
			set
			{
				if ((this._CategoryGroup_Id != value))
				{
					if (this._GroupingCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryGroup_IdChanging(value);
					this.SendPropertyChanging();
					this._CategoryGroup_Id = value;
					this.SendPropertyChanged("CategoryGroup_Id");
					this.OnCategoryGroup_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Company_Id", DbType="Int")]
		public System.Nullable<int> Company_Id
		{
			get
			{
				return this._Company_Id;
			}
			set
			{
				if ((this._Company_Id != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompany_IdChanging(value);
					this.SendPropertyChanging();
					this._Company_Id = value;
					this.SendPropertyChanged("Company_Id");
					this.OnCompany_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Weighing", Storage="_Weighings", ThisKey="Id", OtherKey="Category_Id")]
		public EntitySet<Weighing> Weighings
		{
			get
			{
				return this._Weighings;
			}
			set
			{
				this._Weighings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Category", Storage="_Categories", ThisKey="Id", OtherKey="CategoryGroup_Id")]
		public EntitySet<Category> Categories
		{
			get
			{
				return this._Categories;
			}
			set
			{
				this._Categories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Question", Storage="_Questions", ThisKey="Id", OtherKey="Category_Id")]
		public EntitySet<Question> Questions
		{
			get
			{
				return this._Questions;
			}
			set
			{
				this._Questions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Category", Storage="_GroupingCategory", ThisKey="CategoryGroup_Id", OtherKey="Id", IsForeignKey=true)]
		public Category GroupingCategory
		{
			get
			{
				return this._GroupingCategory.Entity;
			}
			set
			{
				Category previousValue = this._GroupingCategory.Entity;
				if (((previousValue != value) 
							|| (this._GroupingCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupingCategory.Entity = null;
						previousValue.Categories.Remove(this);
					}
					this._GroupingCategory.Entity = value;
					if ((value != null))
					{
						value.Categories.Add(this);
						this._CategoryGroup_Id = value.Id;
					}
					else
					{
						this._CategoryGroup_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("GroupingCategory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Questionnaire_Category", Storage="_Questionnaire", ThisKey="Questionnaire_Id", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Questionnaire Questionnaire
		{
			get
			{
				return this._Questionnaire.Entity;
			}
			set
			{
				Questionnaire previousValue = this._Questionnaire.Entity;
				if (((previousValue != value) 
							|| (this._Questionnaire.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Questionnaire.Entity = null;
						previousValue.Categories.Remove(this);
					}
					this._Questionnaire.Entity = value;
					if ((value != null))
					{
						value.Categories.Add(this);
						this._Questionnaire_Id = value.Id;
					}
					else
					{
						this._Questionnaire_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Questionnaire");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Category", Storage="_Company", ThisKey="Company_Id", OtherKey="Id", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Categories.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Categories.Add(this);
						this._Company_Id = value.Id;
					}
					else
					{
						this._Company_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Weighings(Weighing entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Weighings(Weighing entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
		
		private void attach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.GroupingCategory = this;
		}
		
		private void detach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.GroupingCategory = null;
		}
		
		private void attach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tickets")]
	public partial class Ticket : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Email;
		
		private int _Evaluation_Id;
		
		private EntityRef<Evaluation> _Evaluation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnEvaluation_IdChanging(int value);
    partial void OnEvaluation_IdChanged();
    #endregion
		
		public Ticket()
		{
			this._Evaluation = default(EntityRef<Evaluation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Evaluation_Id", DbType="Int NOT NULL")]
		public int Evaluation_Id
		{
			get
			{
				return this._Evaluation_Id;
			}
			set
			{
				if ((this._Evaluation_Id != value))
				{
					if (this._Evaluation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEvaluation_IdChanging(value);
					this.SendPropertyChanging();
					this._Evaluation_Id = value;
					this.SendPropertyChanged("Evaluation_Id");
					this.OnEvaluation_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Evaluation_Ticket", Storage="_Evaluation", ThisKey="Evaluation_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Evaluation Evaluation
		{
			get
			{
				return this._Evaluation.Entity;
			}
			set
			{
				Evaluation previousValue = this._Evaluation.Entity;
				if (((previousValue != value) 
							|| (this._Evaluation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Evaluation.Entity = null;
						previousValue.Tickets.Remove(this);
					}
					this._Evaluation.Entity = value;
					if ((value != null))
					{
						value.Tickets.Add(this);
						this._Evaluation_Id = value.Id;
					}
					else
					{
						this._Evaluation_Id = default(int);
					}
					this.SendPropertyChanged("Evaluation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OptionBySelectionAnswer")]
	public partial class OptionBySelectionAnswer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _SelectionAnswer_Id;
		
		private int _Option_Id;
		
		private EntityRef<SelectionAnswer> _SelectionAnswer;
		
		private EntityRef<Option> _Option;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSelectionAnswer_IdChanging(int value);
    partial void OnSelectionAnswer_IdChanged();
    partial void OnOption_IdChanging(int value);
    partial void OnOption_IdChanged();
    #endregion
		
		public OptionBySelectionAnswer()
		{
			this._SelectionAnswer = default(EntityRef<SelectionAnswer>);
			this._Option = default(EntityRef<Option>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SelectionAnswer_Id", DbType="Int NOT NULL")]
		public int SelectionAnswer_Id
		{
			get
			{
				return this._SelectionAnswer_Id;
			}
			set
			{
				if ((this._SelectionAnswer_Id != value))
				{
					if (this._SelectionAnswer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSelectionAnswer_IdChanging(value);
					this.SendPropertyChanging();
					this._SelectionAnswer_Id = value;
					this.SendPropertyChanged("SelectionAnswer_Id");
					this.OnSelectionAnswer_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Option_Id", DbType="Int NOT NULL")]
		public int Option_Id
		{
			get
			{
				return this._Option_Id;
			}
			set
			{
				if ((this._Option_Id != value))
				{
					if (this._Option.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOption_IdChanging(value);
					this.SendPropertyChanging();
					this._Option_Id = value;
					this.SendPropertyChanged("Option_Id");
					this.OnOption_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SelectionAnswer_OptionBySelectionAnswer", Storage="_SelectionAnswer", ThisKey="SelectionAnswer_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public SelectionAnswer SelectionAnswer
		{
			get
			{
				return this._SelectionAnswer.Entity;
			}
			set
			{
				SelectionAnswer previousValue = this._SelectionAnswer.Entity;
				if (((previousValue != value) 
							|| (this._SelectionAnswer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SelectionAnswer.Entity = null;
						previousValue.OptionBySelectionAnswers.Remove(this);
					}
					this._SelectionAnswer.Entity = value;
					if ((value != null))
					{
						value.OptionBySelectionAnswers.Add(this);
						this._SelectionAnswer_Id = value.Id;
					}
					else
					{
						this._SelectionAnswer_Id = default(int);
					}
					this.SendPropertyChanged("SelectionAnswer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Option_OptionBySelectionAnswer", Storage="_Option", ThisKey="Option_Id", OtherKey="Id", IsForeignKey=true)]
		public Option Option
		{
			get
			{
				return this._Option.Entity;
			}
			set
			{
				Option previousValue = this._Option.Entity;
				if (((previousValue != value) 
							|| (this._Option.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Option.Entity = null;
						previousValue.OptionBySelectionAnswers.Remove(this);
					}
					this._Option.Entity = value;
					if ((value != null))
					{
						value.OptionBySelectionAnswers.Add(this);
						this._Option_Id = value.Id;
					}
					else
					{
						this._Option_Id = default(int);
					}
					this.SendPropertyChanged("Option");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QuestionTypeByQuestion")]
	public partial class QuestionTypeByQuestion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _QuestionType_Id;
		
		private int _Question_Id;
		
		private string _AuxiliarText;
		
		private EntityRef<QuestionsType> _QuestionsType;
		
		private EntityRef<Question> _Question;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnQuestionType_IdChanging(int value);
    partial void OnQuestionType_IdChanged();
    partial void OnQuestion_IdChanging(int value);
    partial void OnQuestion_IdChanged();
    partial void OnAuxiliarTextChanging(string value);
    partial void OnAuxiliarTextChanged();
    #endregion
		
		public QuestionTypeByQuestion()
		{
			this._QuestionsType = default(EntityRef<QuestionsType>);
			this._Question = default(EntityRef<Question>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionType_Id", DbType="Int NOT NULL")]
		public int QuestionType_Id
		{
			get
			{
				return this._QuestionType_Id;
			}
			set
			{
				if ((this._QuestionType_Id != value))
				{
					if (this._QuestionsType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionType_IdChanging(value);
					this.SendPropertyChanging();
					this._QuestionType_Id = value;
					this.SendPropertyChanged("QuestionType_Id");
					this.OnQuestionType_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Question_Id", DbType="Int NOT NULL")]
		public int Question_Id
		{
			get
			{
				return this._Question_Id;
			}
			set
			{
				if ((this._Question_Id != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestion_IdChanging(value);
					this.SendPropertyChanging();
					this._Question_Id = value;
					this.SendPropertyChanged("Question_Id");
					this.OnQuestion_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuxiliarText", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string AuxiliarText
		{
			get
			{
				return this._AuxiliarText;
			}
			set
			{
				if ((this._AuxiliarText != value))
				{
					this.OnAuxiliarTextChanging(value);
					this.SendPropertyChanging();
					this._AuxiliarText = value;
					this.SendPropertyChanged("AuxiliarText");
					this.OnAuxiliarTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuestionsType_QuestionTypeByQuestion", Storage="_QuestionsType", ThisKey="QuestionType_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public QuestionsType QuestionsType
		{
			get
			{
				return this._QuestionsType.Entity;
			}
			set
			{
				QuestionsType previousValue = this._QuestionsType.Entity;
				if (((previousValue != value) 
							|| (this._QuestionsType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QuestionsType.Entity = null;
						previousValue.QuestionTypeByQuestions.Remove(this);
					}
					this._QuestionsType.Entity = value;
					if ((value != null))
					{
						value.QuestionTypeByQuestions.Add(this);
						this._QuestionType_Id = value.Id;
					}
					else
					{
						this._QuestionType_Id = default(int);
					}
					this.SendPropertyChanged("QuestionsType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_QuestionTypeByQuestion", Storage="_Question", ThisKey="Question_Id", OtherKey="Id", IsForeignKey=true)]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.QuestionTypeByQuestions.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.QuestionTypeByQuestions.Add(this);
						this._Question_Id = value.Id;
					}
					else
					{
						this._Question_Id = default(int);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Options")]
	public partial class Option : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _Questionnaire_Id;
		
		private string _Text;
		
		private int _Value;
		
		private System.DateTime _CreationDate;
		
		private string _Image;
		
		private System.Nullable<int> _Question_Id;
		
		private EntitySet<SelectionAnswer> _SelectionAnswers;
		
		private EntitySet<OptionBySelectionAnswer> _OptionBySelectionAnswers;
		
		private EntityRef<Questionnaire> _Questionnaire;
		
		private EntityRef<Question> _Question;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnQuestionnaire_IdChanging(System.Nullable<int> value);
    partial void OnQuestionnaire_IdChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnValueChanging(int value);
    partial void OnValueChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    partial void OnQuestion_IdChanging(System.Nullable<int> value);
    partial void OnQuestion_IdChanged();
    #endregion
		
		public Option()
		{
			this._SelectionAnswers = new EntitySet<SelectionAnswer>(new Action<SelectionAnswer>(this.attach_SelectionAnswers), new Action<SelectionAnswer>(this.detach_SelectionAnswers));
			this._OptionBySelectionAnswers = new EntitySet<OptionBySelectionAnswer>(new Action<OptionBySelectionAnswer>(this.attach_OptionBySelectionAnswers), new Action<OptionBySelectionAnswer>(this.detach_OptionBySelectionAnswers));
			this._Questionnaire = default(EntityRef<Questionnaire>);
			this._Question = default(EntityRef<Question>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Questionnaire_Id", DbType="Int")]
		public System.Nullable<int> Questionnaire_Id
		{
			get
			{
				return this._Questionnaire_Id;
			}
			set
			{
				if ((this._Questionnaire_Id != value))
				{
					if (this._Questionnaire.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionnaire_IdChanging(value);
					this.SendPropertyChanging();
					this._Questionnaire_Id = value;
					this.SendPropertyChanged("Questionnaire_Id");
					this.OnQuestionnaire_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Int NOT NULL")]
		public int Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="VarChar(50)")]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Question_Id", DbType="Int")]
		public System.Nullable<int> Question_Id
		{
			get
			{
				return this._Question_Id;
			}
			set
			{
				if ((this._Question_Id != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestion_IdChanging(value);
					this.SendPropertyChanging();
					this._Question_Id = value;
					this.SendPropertyChanged("Question_Id");
					this.OnQuestion_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Option_SelectionAnswer", Storage="_SelectionAnswers", ThisKey="Id", OtherKey="Option_Id")]
		public EntitySet<SelectionAnswer> SelectionAnswers
		{
			get
			{
				return this._SelectionAnswers;
			}
			set
			{
				this._SelectionAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Option_OptionBySelectionAnswer", Storage="_OptionBySelectionAnswers", ThisKey="Id", OtherKey="Option_Id")]
		public EntitySet<OptionBySelectionAnswer> OptionBySelectionAnswers
		{
			get
			{
				return this._OptionBySelectionAnswers;
			}
			set
			{
				this._OptionBySelectionAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Questionnaire_Option", Storage="_Questionnaire", ThisKey="Questionnaire_Id", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Questionnaire Questionnaire
		{
			get
			{
				return this._Questionnaire.Entity;
			}
			set
			{
				Questionnaire previousValue = this._Questionnaire.Entity;
				if (((previousValue != value) 
							|| (this._Questionnaire.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Questionnaire.Entity = null;
						previousValue.Options.Remove(this);
					}
					this._Questionnaire.Entity = value;
					if ((value != null))
					{
						value.Options.Add(this);
						this._Questionnaire_Id = value.Id;
					}
					else
					{
						this._Questionnaire_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Questionnaire");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_Option", Storage="_Question", ThisKey="Question_Id", OtherKey="Id", IsForeignKey=true)]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.Options.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.Options.Add(this);
						this._Question_Id = value.Id;
					}
					else
					{
						this._Question_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SelectionAnswers(SelectionAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Option = this;
		}
		
		private void detach_SelectionAnswers(SelectionAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Option = null;
		}
		
		private void attach_OptionBySelectionAnswers(OptionBySelectionAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Option = this;
		}
		
		private void detach_OptionBySelectionAnswers(OptionBySelectionAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Option = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Questions")]
	public partial class Question : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _QuestionType_Id;
		
		private int _Category_Id;
		
		private string _Text;
		
		private int _SortOrder;
		
		private System.DateTime _CreationDate;
		
		private bool _Positive;
		
		private System.Nullable<int> _NumMaxMult;
		
		private string _AuxiliarText;
		
		private System.Nullable<bool> _ShortText;
		
		private EntitySet<TextAnswer> _TextAnswers;
		
		private EntitySet<SelectionAnswer> _SelectionAnswers;
		
		private EntitySet<DichotomousAnswer> _DichotomousAnswers;
		
		private EntitySet<QuestionTypeByQuestion> _QuestionTypeByQuestions;
		
		private EntitySet<Option> _Options;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<QuestionsType> _QuestionsType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnQuestionType_IdChanging(int value);
    partial void OnQuestionType_IdChanged();
    partial void OnCategory_IdChanging(int value);
    partial void OnCategory_IdChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnSortOrderChanging(int value);
    partial void OnSortOrderChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnPositiveChanging(bool value);
    partial void OnPositiveChanged();
    partial void OnNumMaxMultChanging(System.Nullable<int> value);
    partial void OnNumMaxMultChanged();
    partial void OnAuxiliarTextChanging(string value);
    partial void OnAuxiliarTextChanged();
    partial void OnShortTextChanging(System.Nullable<bool> value);
    partial void OnShortTextChanged();
    #endregion
		
		public Question()
		{
			this._TextAnswers = new EntitySet<TextAnswer>(new Action<TextAnswer>(this.attach_TextAnswers), new Action<TextAnswer>(this.detach_TextAnswers));
			this._SelectionAnswers = new EntitySet<SelectionAnswer>(new Action<SelectionAnswer>(this.attach_SelectionAnswers), new Action<SelectionAnswer>(this.detach_SelectionAnswers));
			this._DichotomousAnswers = new EntitySet<DichotomousAnswer>(new Action<DichotomousAnswer>(this.attach_DichotomousAnswers), new Action<DichotomousAnswer>(this.detach_DichotomousAnswers));
			this._QuestionTypeByQuestions = new EntitySet<QuestionTypeByQuestion>(new Action<QuestionTypeByQuestion>(this.attach_QuestionTypeByQuestions), new Action<QuestionTypeByQuestion>(this.detach_QuestionTypeByQuestions));
			this._Options = new EntitySet<Option>(new Action<Option>(this.attach_Options), new Action<Option>(this.detach_Options));
			this._Category = default(EntityRef<Category>);
			this._QuestionsType = default(EntityRef<QuestionsType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionType_Id", DbType="Int NOT NULL")]
		public int QuestionType_Id
		{
			get
			{
				return this._QuestionType_Id;
			}
			set
			{
				if ((this._QuestionType_Id != value))
				{
					if (this._QuestionsType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionType_IdChanging(value);
					this.SendPropertyChanging();
					this._QuestionType_Id = value;
					this.SendPropertyChanged("QuestionType_Id");
					this.OnQuestionType_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category_Id", DbType="Int NOT NULL")]
		public int Category_Id
		{
			get
			{
				return this._Category_Id;
			}
			set
			{
				if ((this._Category_Id != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategory_IdChanging(value);
					this.SendPropertyChanging();
					this._Category_Id = value;
					this.SendPropertyChanged("Category_Id");
					this.OnCategory_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortOrder", DbType="Int NOT NULL")]
		public int SortOrder
		{
			get
			{
				return this._SortOrder;
			}
			set
			{
				if ((this._SortOrder != value))
				{
					this.OnSortOrderChanging(value);
					this.SendPropertyChanging();
					this._SortOrder = value;
					this.SendPropertyChanged("SortOrder");
					this.OnSortOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Positive", DbType="Bit NOT NULL")]
		public bool Positive
		{
			get
			{
				return this._Positive;
			}
			set
			{
				if ((this._Positive != value))
				{
					this.OnPositiveChanging(value);
					this.SendPropertyChanging();
					this._Positive = value;
					this.SendPropertyChanged("Positive");
					this.OnPositiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumMaxMult", DbType="Int")]
		public System.Nullable<int> NumMaxMult
		{
			get
			{
				return this._NumMaxMult;
			}
			set
			{
				if ((this._NumMaxMult != value))
				{
					this.OnNumMaxMultChanging(value);
					this.SendPropertyChanging();
					this._NumMaxMult = value;
					this.SendPropertyChanged("NumMaxMult");
					this.OnNumMaxMultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuxiliarText", DbType="VarChar(50)")]
		public string AuxiliarText
		{
			get
			{
				return this._AuxiliarText;
			}
			set
			{
				if ((this._AuxiliarText != value))
				{
					this.OnAuxiliarTextChanging(value);
					this.SendPropertyChanging();
					this._AuxiliarText = value;
					this.SendPropertyChanged("AuxiliarText");
					this.OnAuxiliarTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortText", DbType="Bit")]
		public System.Nullable<bool> ShortText
		{
			get
			{
				return this._ShortText;
			}
			set
			{
				if ((this._ShortText != value))
				{
					this.OnShortTextChanging(value);
					this.SendPropertyChanging();
					this._ShortText = value;
					this.SendPropertyChanged("ShortText");
					this.OnShortTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_TextAnswer", Storage="_TextAnswers", ThisKey="Id", OtherKey="Question_Id")]
		public EntitySet<TextAnswer> TextAnswers
		{
			get
			{
				return this._TextAnswers;
			}
			set
			{
				this._TextAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_SelectionAnswer", Storage="_SelectionAnswers", ThisKey="Id", OtherKey="Question_Id")]
		public EntitySet<SelectionAnswer> SelectionAnswers
		{
			get
			{
				return this._SelectionAnswers;
			}
			set
			{
				this._SelectionAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_DichotomousAnswer", Storage="_DichotomousAnswers", ThisKey="Id", OtherKey="Question_Id")]
		public EntitySet<DichotomousAnswer> DichotomousAnswers
		{
			get
			{
				return this._DichotomousAnswers;
			}
			set
			{
				this._DichotomousAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_QuestionTypeByQuestion", Storage="_QuestionTypeByQuestions", ThisKey="Id", OtherKey="Question_Id")]
		public EntitySet<QuestionTypeByQuestion> QuestionTypeByQuestions
		{
			get
			{
				return this._QuestionTypeByQuestions;
			}
			set
			{
				this._QuestionTypeByQuestions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_Option", Storage="_Options", ThisKey="Id", OtherKey="Question_Id")]
		public EntitySet<Option> Options
		{
			get
			{
				return this._Options;
			}
			set
			{
				this._Options.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Question", Storage="_Category", ThisKey="Category_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Questions.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Questions.Add(this);
						this._Category_Id = value.Id;
					}
					else
					{
						this._Category_Id = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuestionsType_Question", Storage="_QuestionsType", ThisKey="QuestionType_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public QuestionsType QuestionsType
		{
			get
			{
				return this._QuestionsType.Entity;
			}
			set
			{
				QuestionsType previousValue = this._QuestionsType.Entity;
				if (((previousValue != value) 
							|| (this._QuestionsType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QuestionsType.Entity = null;
						previousValue.Questions.Remove(this);
					}
					this._QuestionsType.Entity = value;
					if ((value != null))
					{
						value.Questions.Add(this);
						this._QuestionType_Id = value.Id;
					}
					else
					{
						this._QuestionType_Id = default(int);
					}
					this.SendPropertyChanged("QuestionsType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TextAnswers(TextAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_TextAnswers(TextAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
		
		private void attach_SelectionAnswers(SelectionAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_SelectionAnswers(SelectionAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
		
		private void attach_DichotomousAnswers(DichotomousAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_DichotomousAnswers(DichotomousAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
		
		private void attach_QuestionTypeByQuestions(QuestionTypeByQuestion entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_QuestionTypeByQuestions(QuestionTypeByQuestion entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
		
		private void attach_Options(Option entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_Options(Option entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DemographicsInTest")]
	public partial class DemographicsInTest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Test_Id;
		
		private int _Demographic_Id;
		
		private bool _Selector;
		
		private System.Nullable<int> _FOT_Id;
		
		private string _Label;
		
		private EntityRef<FunctionalOrganizationType> _FunctionalOrganizationType;
		
		private EntityRef<Demographic> _Demographic;
		
		private EntityRef<Test> _Test;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTest_IdChanging(int value);
    partial void OnTest_IdChanged();
    partial void OnDemographic_IdChanging(int value);
    partial void OnDemographic_IdChanged();
    partial void OnSelectorChanging(bool value);
    partial void OnSelectorChanged();
    partial void OnFOT_IdChanging(System.Nullable<int> value);
    partial void OnFOT_IdChanged();
    partial void OnLabelChanging(string value);
    partial void OnLabelChanged();
    #endregion
		
		public DemographicsInTest()
		{
			this._FunctionalOrganizationType = default(EntityRef<FunctionalOrganizationType>);
			this._Demographic = default(EntityRef<Demographic>);
			this._Test = default(EntityRef<Test>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Test_Id", DbType="Int NOT NULL")]
		public int Test_Id
		{
			get
			{
				return this._Test_Id;
			}
			set
			{
				if ((this._Test_Id != value))
				{
					if (this._Test.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTest_IdChanging(value);
					this.SendPropertyChanging();
					this._Test_Id = value;
					this.SendPropertyChanged("Test_Id");
					this.OnTest_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Demographic_Id", DbType="Int NOT NULL")]
		public int Demographic_Id
		{
			get
			{
				return this._Demographic_Id;
			}
			set
			{
				if ((this._Demographic_Id != value))
				{
					if (this._Demographic.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDemographic_IdChanging(value);
					this.SendPropertyChanging();
					this._Demographic_Id = value;
					this.SendPropertyChanged("Demographic_Id");
					this.OnDemographic_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Selector", DbType="Bit NOT NULL")]
		public bool Selector
		{
			get
			{
				return this._Selector;
			}
			set
			{
				if ((this._Selector != value))
				{
					this.OnSelectorChanging(value);
					this.SendPropertyChanging();
					this._Selector = value;
					this.SendPropertyChanged("Selector");
					this.OnSelectorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FOT_Id", DbType="Int")]
		public System.Nullable<int> FOT_Id
		{
			get
			{
				return this._FOT_Id;
			}
			set
			{
				if ((this._FOT_Id != value))
				{
					if (this._FunctionalOrganizationType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFOT_IdChanging(value);
					this.SendPropertyChanging();
					this._FOT_Id = value;
					this.SendPropertyChanged("FOT_Id");
					this.OnFOT_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Label", DbType="VarChar(50)")]
		public string Label
		{
			get
			{
				return this._Label;
			}
			set
			{
				if ((this._Label != value))
				{
					this.OnLabelChanging(value);
					this.SendPropertyChanging();
					this._Label = value;
					this.SendPropertyChanged("Label");
					this.OnLabelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FunctionalOrganizationType_DemographicsInTest", Storage="_FunctionalOrganizationType", ThisKey="FOT_Id", OtherKey="Id", IsForeignKey=true)]
		public FunctionalOrganizationType FunctionalOrganizationType
		{
			get
			{
				return this._FunctionalOrganizationType.Entity;
			}
			set
			{
				FunctionalOrganizationType previousValue = this._FunctionalOrganizationType.Entity;
				if (((previousValue != value) 
							|| (this._FunctionalOrganizationType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FunctionalOrganizationType.Entity = null;
						previousValue.DemographicsInTests.Remove(this);
					}
					this._FunctionalOrganizationType.Entity = value;
					if ((value != null))
					{
						value.DemographicsInTests.Add(this);
						this._FOT_Id = value.Id;
					}
					else
					{
						this._FOT_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("FunctionalOrganizationType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Demographic_DemographicsInTest", Storage="_Demographic", ThisKey="Demographic_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Demographic Demographic
		{
			get
			{
				return this._Demographic.Entity;
			}
			set
			{
				Demographic previousValue = this._Demographic.Entity;
				if (((previousValue != value) 
							|| (this._Demographic.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Demographic.Entity = null;
						previousValue.DemographicsInTests.Remove(this);
					}
					this._Demographic.Entity = value;
					if ((value != null))
					{
						value.DemographicsInTests.Add(this);
						this._Demographic_Id = value.Id;
					}
					else
					{
						this._Demographic_Id = default(int);
					}
					this.SendPropertyChanged("Demographic");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_DemographicsInTest", Storage="_Test", ThisKey="Test_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Test Test
		{
			get
			{
				return this._Test.Entity;
			}
			set
			{
				Test previousValue = this._Test.Entity;
				if (((previousValue != value) 
							|| (this._Test.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Test.Entity = null;
						previousValue.DemographicsInTests.Remove(this);
					}
					this._Test.Entity = value;
					if ((value != null))
					{
						value.DemographicsInTests.Add(this);
						this._Test_Id = value.Id;
					}
					else
					{
						this._Test_Id = default(int);
					}
					this.SendPropertyChanged("Test");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Demographics")]
	public partial class Demographic : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<DemographicSelectorDetail> _DemographicSelectorDetails;
		
		private EntitySet<DemographicsInTest> _DemographicsInTests;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Demographic()
		{
			this._DemographicSelectorDetails = new EntitySet<DemographicSelectorDetail>(new Action<DemographicSelectorDetail>(this.attach_DemographicSelectorDetails), new Action<DemographicSelectorDetail>(this.detach_DemographicSelectorDetails));
			this._DemographicsInTests = new EntitySet<DemographicsInTest>(new Action<DemographicsInTest>(this.attach_DemographicsInTests), new Action<DemographicsInTest>(this.detach_DemographicsInTests));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Demographic_DemographicSelectorDetail", Storage="_DemographicSelectorDetails", ThisKey="Id", OtherKey="Demographic_Id")]
		public EntitySet<DemographicSelectorDetail> DemographicSelectorDetails
		{
			get
			{
				return this._DemographicSelectorDetails;
			}
			set
			{
				this._DemographicSelectorDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Demographic_DemographicsInTest", Storage="_DemographicsInTests", ThisKey="Id", OtherKey="Demographic_Id")]
		public EntitySet<DemographicsInTest> DemographicsInTests
		{
			get
			{
				return this._DemographicsInTests;
			}
			set
			{
				this._DemographicsInTests.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DemographicSelectorDetails(DemographicSelectorDetail entity)
		{
			this.SendPropertyChanging();
			entity.Demographic = this;
		}
		
		private void detach_DemographicSelectorDetails(DemographicSelectorDetail entity)
		{
			this.SendPropertyChanging();
			entity.Demographic = null;
		}
		
		private void attach_DemographicsInTests(DemographicsInTest entity)
		{
			this.SendPropertyChanging();
			entity.Demographic = this;
		}
		
		private void detach_DemographicsInTests(DemographicsInTest entity)
		{
			this.SendPropertyChanging();
			entity.Demographic = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ER_AnswersByFOTypes")]
	public partial class ER_AnswersByFOType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Text;
		
		private decimal _Value;
		
		private int _ExecutiveReport_Id;
		
		private EntityRef<ExecutiveReport> _ExecutiveReport;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnValueChanging(decimal value);
    partial void OnValueChanged();
    partial void OnExecutiveReport_IdChanging(int value);
    partial void OnExecutiveReport_IdChanged();
    #endregion
		
		public ER_AnswersByFOType()
		{
			this._ExecutiveReport = default(EntityRef<ExecutiveReport>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Decimal(18,3) NOT NULL")]
		public decimal Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExecutiveReport_Id", DbType="Int NOT NULL")]
		public int ExecutiveReport_Id
		{
			get
			{
				return this._ExecutiveReport_Id;
			}
			set
			{
				if ((this._ExecutiveReport_Id != value))
				{
					if (this._ExecutiveReport.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExecutiveReport_IdChanging(value);
					this.SendPropertyChanging();
					this._ExecutiveReport_Id = value;
					this.SendPropertyChanged("ExecutiveReport_Id");
					this.OnExecutiveReport_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExecutiveReport_ER_AnswersByFOType", Storage="_ExecutiveReport", ThisKey="ExecutiveReport_Id", OtherKey="Id", IsForeignKey=true)]
		public ExecutiveReport ExecutiveReport
		{
			get
			{
				return this._ExecutiveReport.Entity;
			}
			set
			{
				ExecutiveReport previousValue = this._ExecutiveReport.Entity;
				if (((previousValue != value) 
							|| (this._ExecutiveReport.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExecutiveReport.Entity = null;
						previousValue.ER_AnswersByFOTypes.Remove(this);
					}
					this._ExecutiveReport.Entity = value;
					if ((value != null))
					{
						value.ER_AnswersByFOTypes.Add(this);
						this._ExecutiveReport_Id = value.Id;
					}
					else
					{
						this._ExecutiveReport_Id = default(int);
					}
					this.SendPropertyChanged("ExecutiveReport");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ER_StepwiseValues")]
	public partial class ER_StepwiseValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Text;
		
		private decimal _Value;
		
		private int _ExecutiveReport_Id;
		
		private EntityRef<ExecutiveReport> _ExecutiveReport;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnValueChanging(decimal value);
    partial void OnValueChanged();
    partial void OnExecutiveReport_IdChanging(int value);
    partial void OnExecutiveReport_IdChanged();
    #endregion
		
		public ER_StepwiseValue()
		{
			this._ExecutiveReport = default(EntityRef<ExecutiveReport>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Decimal(18,3) NOT NULL")]
		public decimal Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExecutiveReport_Id", DbType="Int NOT NULL")]
		public int ExecutiveReport_Id
		{
			get
			{
				return this._ExecutiveReport_Id;
			}
			set
			{
				if ((this._ExecutiveReport_Id != value))
				{
					if (this._ExecutiveReport.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExecutiveReport_IdChanging(value);
					this.SendPropertyChanging();
					this._ExecutiveReport_Id = value;
					this.SendPropertyChanged("ExecutiveReport_Id");
					this.OnExecutiveReport_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExecutiveReport_ER_StepwiseValue", Storage="_ExecutiveReport", ThisKey="ExecutiveReport_Id", OtherKey="Id", IsForeignKey=true)]
		public ExecutiveReport ExecutiveReport
		{
			get
			{
				return this._ExecutiveReport.Entity;
			}
			set
			{
				ExecutiveReport previousValue = this._ExecutiveReport.Entity;
				if (((previousValue != value) 
							|| (this._ExecutiveReport.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExecutiveReport.Entity = null;
						previousValue.ER_StepwiseValues.Remove(this);
					}
					this._ExecutiveReport.Entity = value;
					if ((value != null))
					{
						value.ER_StepwiseValues.Add(this);
						this._ExecutiveReport_Id = value.Id;
					}
					else
					{
						this._ExecutiveReport_Id = default(int);
					}
					this.SendPropertyChanged("ExecutiveReport");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ER_AnswersByPositionLevels")]
	public partial class ER_AnswersByPositionLevel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Text;
		
		private decimal _Value;
		
		private int _ExecutiveReport_Id;
		
		private EntityRef<ExecutiveReport> _ExecutiveReport;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnValueChanging(decimal value);
    partial void OnValueChanged();
    partial void OnExecutiveReport_IdChanging(int value);
    partial void OnExecutiveReport_IdChanged();
    #endregion
		
		public ER_AnswersByPositionLevel()
		{
			this._ExecutiveReport = default(EntityRef<ExecutiveReport>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Decimal(18,3) NOT NULL")]
		public decimal Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExecutiveReport_Id", DbType="Int NOT NULL")]
		public int ExecutiveReport_Id
		{
			get
			{
				return this._ExecutiveReport_Id;
			}
			set
			{
				if ((this._ExecutiveReport_Id != value))
				{
					if (this._ExecutiveReport.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExecutiveReport_IdChanging(value);
					this.SendPropertyChanging();
					this._ExecutiveReport_Id = value;
					this.SendPropertyChanged("ExecutiveReport_Id");
					this.OnExecutiveReport_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExecutiveReport_ER_AnswersByPositionLevel", Storage="_ExecutiveReport", ThisKey="ExecutiveReport_Id", OtherKey="Id", IsForeignKey=true)]
		public ExecutiveReport ExecutiveReport
		{
			get
			{
				return this._ExecutiveReport.Entity;
			}
			set
			{
				ExecutiveReport previousValue = this._ExecutiveReport.Entity;
				if (((previousValue != value) 
							|| (this._ExecutiveReport.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExecutiveReport.Entity = null;
						previousValue.ER_AnswersByPositionLevels.Remove(this);
					}
					this._ExecutiveReport.Entity = value;
					if ((value != null))
					{
						value.ER_AnswersByPositionLevels.Add(this);
						this._ExecutiveReport_Id = value.Id;
					}
					else
					{
						this._ExecutiveReport_Id = default(int);
					}
					this.SendPropertyChanged("ExecutiveReport");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ER_CategoriesSatEmployees")]
	public partial class ER_CategoriesSatEmployee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Text;
		
		private int _Satisfied;
		
		private decimal _PctgSatisfied;
		
		private int _NotSatisfied;
		
		private decimal _PctgNotSatisfied;
		
		private System.Nullable<decimal> _Average;
		
		private System.Nullable<decimal> _Median;
		
		private int _ExecutiveReport_Id;
		
		private EntityRef<ExecutiveReport> _ExecutiveReport;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnSatisfiedChanging(int value);
    partial void OnSatisfiedChanged();
    partial void OnPctgSatisfiedChanging(decimal value);
    partial void OnPctgSatisfiedChanged();
    partial void OnNotSatisfiedChanging(int value);
    partial void OnNotSatisfiedChanged();
    partial void OnPctgNotSatisfiedChanging(decimal value);
    partial void OnPctgNotSatisfiedChanged();
    partial void OnAverageChanging(System.Nullable<decimal> value);
    partial void OnAverageChanged();
    partial void OnMedianChanging(System.Nullable<decimal> value);
    partial void OnMedianChanged();
    partial void OnExecutiveReport_IdChanging(int value);
    partial void OnExecutiveReport_IdChanged();
    #endregion
		
		public ER_CategoriesSatEmployee()
		{
			this._ExecutiveReport = default(EntityRef<ExecutiveReport>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Satisfied", DbType="Int NOT NULL")]
		public int Satisfied
		{
			get
			{
				return this._Satisfied;
			}
			set
			{
				if ((this._Satisfied != value))
				{
					this.OnSatisfiedChanging(value);
					this.SendPropertyChanging();
					this._Satisfied = value;
					this.SendPropertyChanged("Satisfied");
					this.OnSatisfiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PctgSatisfied", DbType="Decimal(18,3) NOT NULL")]
		public decimal PctgSatisfied
		{
			get
			{
				return this._PctgSatisfied;
			}
			set
			{
				if ((this._PctgSatisfied != value))
				{
					this.OnPctgSatisfiedChanging(value);
					this.SendPropertyChanging();
					this._PctgSatisfied = value;
					this.SendPropertyChanged("PctgSatisfied");
					this.OnPctgSatisfiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotSatisfied", DbType="Int NOT NULL")]
		public int NotSatisfied
		{
			get
			{
				return this._NotSatisfied;
			}
			set
			{
				if ((this._NotSatisfied != value))
				{
					this.OnNotSatisfiedChanging(value);
					this.SendPropertyChanging();
					this._NotSatisfied = value;
					this.SendPropertyChanged("NotSatisfied");
					this.OnNotSatisfiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PctgNotSatisfied", DbType="Decimal(18,3) NOT NULL")]
		public decimal PctgNotSatisfied
		{
			get
			{
				return this._PctgNotSatisfied;
			}
			set
			{
				if ((this._PctgNotSatisfied != value))
				{
					this.OnPctgNotSatisfiedChanging(value);
					this.SendPropertyChanging();
					this._PctgNotSatisfied = value;
					this.SendPropertyChanged("PctgNotSatisfied");
					this.OnPctgNotSatisfiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Average", DbType="Decimal(18,3)")]
		public System.Nullable<decimal> Average
		{
			get
			{
				return this._Average;
			}
			set
			{
				if ((this._Average != value))
				{
					this.OnAverageChanging(value);
					this.SendPropertyChanging();
					this._Average = value;
					this.SendPropertyChanged("Average");
					this.OnAverageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Median", DbType="Decimal(18,3)")]
		public System.Nullable<decimal> Median
		{
			get
			{
				return this._Median;
			}
			set
			{
				if ((this._Median != value))
				{
					this.OnMedianChanging(value);
					this.SendPropertyChanging();
					this._Median = value;
					this.SendPropertyChanged("Median");
					this.OnMedianChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExecutiveReport_Id", DbType="Int NOT NULL")]
		public int ExecutiveReport_Id
		{
			get
			{
				return this._ExecutiveReport_Id;
			}
			set
			{
				if ((this._ExecutiveReport_Id != value))
				{
					if (this._ExecutiveReport.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExecutiveReport_IdChanging(value);
					this.SendPropertyChanging();
					this._ExecutiveReport_Id = value;
					this.SendPropertyChanged("ExecutiveReport_Id");
					this.OnExecutiveReport_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExecutiveReport_ER_CategoriesSatEmployee", Storage="_ExecutiveReport", ThisKey="ExecutiveReport_Id", OtherKey="Id", IsForeignKey=true)]
		public ExecutiveReport ExecutiveReport
		{
			get
			{
				return this._ExecutiveReport.Entity;
			}
			set
			{
				ExecutiveReport previousValue = this._ExecutiveReport.Entity;
				if (((previousValue != value) 
							|| (this._ExecutiveReport.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExecutiveReport.Entity = null;
						previousValue.ER_CategoriesSatEmployees.Remove(this);
					}
					this._ExecutiveReport.Entity = value;
					if ((value != null))
					{
						value.ER_CategoriesSatEmployees.Add(this);
						this._ExecutiveReport_Id = value.Id;
					}
					else
					{
						this._ExecutiveReport_Id = default(int);
					}
					this.SendPropertyChanged("ExecutiveReport");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ER_ClimateByBranches")]
	public partial class ER_ClimateByBranch : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Text;
		
		private decimal _Value;
		
		private int _ExecutiveReport_Id;
		
		private EntityRef<ExecutiveReport> _ExecutiveReport;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnValueChanging(decimal value);
    partial void OnValueChanged();
    partial void OnExecutiveReport_IdChanging(int value);
    partial void OnExecutiveReport_IdChanged();
    #endregion
		
		public ER_ClimateByBranch()
		{
			this._ExecutiveReport = default(EntityRef<ExecutiveReport>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Decimal(18,3) NOT NULL")]
		public decimal Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExecutiveReport_Id", DbType="Int NOT NULL")]
		public int ExecutiveReport_Id
		{
			get
			{
				return this._ExecutiveReport_Id;
			}
			set
			{
				if ((this._ExecutiveReport_Id != value))
				{
					if (this._ExecutiveReport.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExecutiveReport_IdChanging(value);
					this.SendPropertyChanging();
					this._ExecutiveReport_Id = value;
					this.SendPropertyChanged("ExecutiveReport_Id");
					this.OnExecutiveReport_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExecutiveReport_ER_ClimateByBranch", Storage="_ExecutiveReport", ThisKey="ExecutiveReport_Id", OtherKey="Id", IsForeignKey=true)]
		public ExecutiveReport ExecutiveReport
		{
			get
			{
				return this._ExecutiveReport.Entity;
			}
			set
			{
				ExecutiveReport previousValue = this._ExecutiveReport.Entity;
				if (((previousValue != value) 
							|| (this._ExecutiveReport.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExecutiveReport.Entity = null;
						previousValue.ER_ClimateByBranches.Remove(this);
					}
					this._ExecutiveReport.Entity = value;
					if ((value != null))
					{
						value.ER_ClimateByBranches.Add(this);
						this._ExecutiveReport_Id = value.Id;
					}
					else
					{
						this._ExecutiveReport_Id = default(int);
					}
					this.SendPropertyChanged("ExecutiveReport");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ER_ClimateByCategories")]
	public partial class ER_ClimateByCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Text;
		
		private decimal _Value;
		
		private int _ExecutiveReport_Id;
		
		private EntityRef<ExecutiveReport> _ExecutiveReport;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnValueChanging(decimal value);
    partial void OnValueChanged();
    partial void OnExecutiveReport_IdChanging(int value);
    partial void OnExecutiveReport_IdChanged();
    #endregion
		
		public ER_ClimateByCategory()
		{
			this._ExecutiveReport = default(EntityRef<ExecutiveReport>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Decimal(18,3) NOT NULL")]
		public decimal Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExecutiveReport_Id", DbType="Int NOT NULL")]
		public int ExecutiveReport_Id
		{
			get
			{
				return this._ExecutiveReport_Id;
			}
			set
			{
				if ((this._ExecutiveReport_Id != value))
				{
					if (this._ExecutiveReport.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExecutiveReport_IdChanging(value);
					this.SendPropertyChanging();
					this._ExecutiveReport_Id = value;
					this.SendPropertyChanged("ExecutiveReport_Id");
					this.OnExecutiveReport_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExecutiveReport_ER_ClimateByCategory", Storage="_ExecutiveReport", ThisKey="ExecutiveReport_Id", OtherKey="Id", IsForeignKey=true)]
		public ExecutiveReport ExecutiveReport
		{
			get
			{
				return this._ExecutiveReport.Entity;
			}
			set
			{
				ExecutiveReport previousValue = this._ExecutiveReport.Entity;
				if (((previousValue != value) 
							|| (this._ExecutiveReport.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExecutiveReport.Entity = null;
						previousValue.ER_ClimateByCategories.Remove(this);
					}
					this._ExecutiveReport.Entity = value;
					if ((value != null))
					{
						value.ER_ClimateByCategories.Add(this);
						this._ExecutiveReport_Id = value.Id;
					}
					else
					{
						this._ExecutiveReport_Id = default(int);
					}
					this.SendPropertyChanged("ExecutiveReport");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ER_GeneralSatEmployees")]
	public partial class ER_GeneralSatEmployee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Text;
		
		private int _Satisfied;
		
		private decimal _PctgSatisfied;
		
		private int _NotSatisfied;
		
		private decimal _PctgNotSatisfied;
		
		private int _ExecutiveReport_Id;
		
		private EntityRef<ExecutiveReport> _ExecutiveReport;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnSatisfiedChanging(int value);
    partial void OnSatisfiedChanged();
    partial void OnPctgSatisfiedChanging(decimal value);
    partial void OnPctgSatisfiedChanged();
    partial void OnNotSatisfiedChanging(int value);
    partial void OnNotSatisfiedChanged();
    partial void OnPctgNotSatisfiedChanging(decimal value);
    partial void OnPctgNotSatisfiedChanged();
    partial void OnExecutiveReport_IdChanging(int value);
    partial void OnExecutiveReport_IdChanged();
    #endregion
		
		public ER_GeneralSatEmployee()
		{
			this._ExecutiveReport = default(EntityRef<ExecutiveReport>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Satisfied", DbType="Int NOT NULL")]
		public int Satisfied
		{
			get
			{
				return this._Satisfied;
			}
			set
			{
				if ((this._Satisfied != value))
				{
					this.OnSatisfiedChanging(value);
					this.SendPropertyChanging();
					this._Satisfied = value;
					this.SendPropertyChanged("Satisfied");
					this.OnSatisfiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PctgSatisfied", DbType="Decimal(18,3) NOT NULL")]
		public decimal PctgSatisfied
		{
			get
			{
				return this._PctgSatisfied;
			}
			set
			{
				if ((this._PctgSatisfied != value))
				{
					this.OnPctgSatisfiedChanging(value);
					this.SendPropertyChanging();
					this._PctgSatisfied = value;
					this.SendPropertyChanged("PctgSatisfied");
					this.OnPctgSatisfiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotSatisfied", DbType="Int NOT NULL")]
		public int NotSatisfied
		{
			get
			{
				return this._NotSatisfied;
			}
			set
			{
				if ((this._NotSatisfied != value))
				{
					this.OnNotSatisfiedChanging(value);
					this.SendPropertyChanging();
					this._NotSatisfied = value;
					this.SendPropertyChanged("NotSatisfied");
					this.OnNotSatisfiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PctgNotSatisfied", DbType="Decimal(18,3) NOT NULL")]
		public decimal PctgNotSatisfied
		{
			get
			{
				return this._PctgNotSatisfied;
			}
			set
			{
				if ((this._PctgNotSatisfied != value))
				{
					this.OnPctgNotSatisfiedChanging(value);
					this.SendPropertyChanging();
					this._PctgNotSatisfied = value;
					this.SendPropertyChanged("PctgNotSatisfied");
					this.OnPctgNotSatisfiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExecutiveReport_Id", DbType="Int NOT NULL")]
		public int ExecutiveReport_Id
		{
			get
			{
				return this._ExecutiveReport_Id;
			}
			set
			{
				if ((this._ExecutiveReport_Id != value))
				{
					if (this._ExecutiveReport.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExecutiveReport_IdChanging(value);
					this.SendPropertyChanging();
					this._ExecutiveReport_Id = value;
					this.SendPropertyChanged("ExecutiveReport_Id");
					this.OnExecutiveReport_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExecutiveReport_ER_GeneralSatEmployee", Storage="_ExecutiveReport", ThisKey="ExecutiveReport_Id", OtherKey="Id", IsForeignKey=true)]
		public ExecutiveReport ExecutiveReport
		{
			get
			{
				return this._ExecutiveReport.Entity;
			}
			set
			{
				ExecutiveReport previousValue = this._ExecutiveReport.Entity;
				if (((previousValue != value) 
							|| (this._ExecutiveReport.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExecutiveReport.Entity = null;
						previousValue.ER_GeneralSatEmployees.Remove(this);
					}
					this._ExecutiveReport.Entity = value;
					if ((value != null))
					{
						value.ER_GeneralSatEmployees.Add(this);
						this._ExecutiveReport_Id = value.Id;
					}
					else
					{
						this._ExecutiveReport_Id = default(int);
					}
					this.SendPropertyChanged("ExecutiveReport");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ER_LocationsSatEmployees")]
	public partial class ER_LocationsSatEmployee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Text;
		
		private int _Satisfied;
		
		private decimal _PctgSatisfied;
		
		private int _NotSatisfied;
		
		private decimal _PctgNotSatisfied;
		
		private System.Nullable<decimal> _Average;
		
		private System.Nullable<decimal> _Median;
		
		private int _ExecutiveReport_Id;
		
		private EntityRef<ExecutiveReport> _ExecutiveReport;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnSatisfiedChanging(int value);
    partial void OnSatisfiedChanged();
    partial void OnPctgSatisfiedChanging(decimal value);
    partial void OnPctgSatisfiedChanged();
    partial void OnNotSatisfiedChanging(int value);
    partial void OnNotSatisfiedChanged();
    partial void OnPctgNotSatisfiedChanging(decimal value);
    partial void OnPctgNotSatisfiedChanged();
    partial void OnAverageChanging(System.Nullable<decimal> value);
    partial void OnAverageChanged();
    partial void OnMedianChanging(System.Nullable<decimal> value);
    partial void OnMedianChanged();
    partial void OnExecutiveReport_IdChanging(int value);
    partial void OnExecutiveReport_IdChanged();
    #endregion
		
		public ER_LocationsSatEmployee()
		{
			this._ExecutiveReport = default(EntityRef<ExecutiveReport>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Satisfied", DbType="Int NOT NULL")]
		public int Satisfied
		{
			get
			{
				return this._Satisfied;
			}
			set
			{
				if ((this._Satisfied != value))
				{
					this.OnSatisfiedChanging(value);
					this.SendPropertyChanging();
					this._Satisfied = value;
					this.SendPropertyChanged("Satisfied");
					this.OnSatisfiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PctgSatisfied", DbType="Decimal(18,3) NOT NULL")]
		public decimal PctgSatisfied
		{
			get
			{
				return this._PctgSatisfied;
			}
			set
			{
				if ((this._PctgSatisfied != value))
				{
					this.OnPctgSatisfiedChanging(value);
					this.SendPropertyChanging();
					this._PctgSatisfied = value;
					this.SendPropertyChanged("PctgSatisfied");
					this.OnPctgSatisfiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotSatisfied", DbType="Int NOT NULL")]
		public int NotSatisfied
		{
			get
			{
				return this._NotSatisfied;
			}
			set
			{
				if ((this._NotSatisfied != value))
				{
					this.OnNotSatisfiedChanging(value);
					this.SendPropertyChanging();
					this._NotSatisfied = value;
					this.SendPropertyChanged("NotSatisfied");
					this.OnNotSatisfiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PctgNotSatisfied", DbType="Decimal(18,3) NOT NULL")]
		public decimal PctgNotSatisfied
		{
			get
			{
				return this._PctgNotSatisfied;
			}
			set
			{
				if ((this._PctgNotSatisfied != value))
				{
					this.OnPctgNotSatisfiedChanging(value);
					this.SendPropertyChanging();
					this._PctgNotSatisfied = value;
					this.SendPropertyChanged("PctgNotSatisfied");
					this.OnPctgNotSatisfiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Average", DbType="Decimal(18,3)")]
		public System.Nullable<decimal> Average
		{
			get
			{
				return this._Average;
			}
			set
			{
				if ((this._Average != value))
				{
					this.OnAverageChanging(value);
					this.SendPropertyChanging();
					this._Average = value;
					this.SendPropertyChanged("Average");
					this.OnAverageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Median", DbType="Decimal(18,3)")]
		public System.Nullable<decimal> Median
		{
			get
			{
				return this._Median;
			}
			set
			{
				if ((this._Median != value))
				{
					this.OnMedianChanging(value);
					this.SendPropertyChanging();
					this._Median = value;
					this.SendPropertyChanged("Median");
					this.OnMedianChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExecutiveReport_Id", DbType="Int NOT NULL")]
		public int ExecutiveReport_Id
		{
			get
			{
				return this._ExecutiveReport_Id;
			}
			set
			{
				if ((this._ExecutiveReport_Id != value))
				{
					if (this._ExecutiveReport.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExecutiveReport_IdChanging(value);
					this.SendPropertyChanging();
					this._ExecutiveReport_Id = value;
					this.SendPropertyChanged("ExecutiveReport_Id");
					this.OnExecutiveReport_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExecutiveReport_ER_LocationsSatEmployee", Storage="_ExecutiveReport", ThisKey="ExecutiveReport_Id", OtherKey="Id", IsForeignKey=true)]
		public ExecutiveReport ExecutiveReport
		{
			get
			{
				return this._ExecutiveReport.Entity;
			}
			set
			{
				ExecutiveReport previousValue = this._ExecutiveReport.Entity;
				if (((previousValue != value) 
							|| (this._ExecutiveReport.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExecutiveReport.Entity = null;
						previousValue.ER_LocationsSatEmployees.Remove(this);
					}
					this._ExecutiveReport.Entity = value;
					if ((value != null))
					{
						value.ER_LocationsSatEmployees.Add(this);
						this._ExecutiveReport_Id = value.Id;
					}
					else
					{
						this._ExecutiveReport_Id = default(int);
					}
					this.SendPropertyChanged("ExecutiveReport");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tests")]
	public partial class Test : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _EndDate;
		
		private System.DateTime _CreationDate;
		
		private string _Text;
		
		private int _EvaluationNumber;
		
		private string _Code;
		
		private int _User_Id;
		
		private System.Nullable<int> _Questionnaire_Id;
		
		private int _Company_Id;
		
		private int _EvaluationsLefts;
		
		private int _CurrentEvaluations;
		
		private bool _GroupByCategories;
		
		private int _RecordsPerPage;
		
		private int _MinimumPeople;
		
		private bool _Disordered;
		
		private bool _Weighted;
		
		private System.Nullable<int> _ConfidenceLevel_Id;
		
		private System.Nullable<int> _StandardError_Id;
		
		private System.Nullable<int> _NumberOfEmployees;
		
		private string _PreviousTest_Text;
		
		private System.Nullable<int> _PreviousTest_Id;
		
		private bool _OneQuestionnaire;
		
		private System.Nullable<int> _ClimateScale_Id;
		
		private bool _ResultBasedOn100;
		
		private bool _Finished;
		
		private EntitySet<GraphicDetail> _GraphicDetails;
		
		private EntitySet<DemographicSelectorDetail> _DemographicSelectorDetails;
		
		private EntitySet<Weighing> _Weighings;
		
		private EntitySet<Evaluation> _Evaluations;
		
		private EntitySet<DemographicsInTest> _DemographicsInTests;
		
		private EntitySet<Test> _Tests;
		
		private EntitySet<ExecutiveReport> _ExecutiveReports;
		
		private EntityRef<ClimateScale> _ClimateScale;
		
		private EntityRef<Company> _Company;
		
		private EntityRef<ConfidenceLevel> _ConfidenceLevel;
		
		private EntityRef<Questionnaire> _Questionnaire;
		
		private EntityRef<StandardError> _StandardError;
		
		private EntityRef<Test> _PreviousTest;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnEvaluationNumberChanging(int value);
    partial void OnEvaluationNumberChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnUser_IdChanging(int value);
    partial void OnUser_IdChanged();
    partial void OnQuestionnaire_IdChanging(System.Nullable<int> value);
    partial void OnQuestionnaire_IdChanged();
    partial void OnCompany_IdChanging(int value);
    partial void OnCompany_IdChanged();
    partial void OnEvaluationsLeftsChanging(int value);
    partial void OnEvaluationsLeftsChanged();
    partial void OnCurrentEvaluationsChanging(int value);
    partial void OnCurrentEvaluationsChanged();
    partial void OnGroupByCategoriesChanging(bool value);
    partial void OnGroupByCategoriesChanged();
    partial void OnRecordsPerPageChanging(int value);
    partial void OnRecordsPerPageChanged();
    partial void OnMinimumPeopleChanging(int value);
    partial void OnMinimumPeopleChanged();
    partial void OnDisorderedChanging(bool value);
    partial void OnDisorderedChanged();
    partial void OnWeightedChanging(bool value);
    partial void OnWeightedChanged();
    partial void OnConfidenceLevel_IdChanging(System.Nullable<int> value);
    partial void OnConfidenceLevel_IdChanged();
    partial void OnStandardError_IdChanging(System.Nullable<int> value);
    partial void OnStandardError_IdChanged();
    partial void OnNumberOfEmployeesChanging(System.Nullable<int> value);
    partial void OnNumberOfEmployeesChanged();
    partial void OnPreviousTest_TextChanging(string value);
    partial void OnPreviousTest_TextChanged();
    partial void OnPreviousTest_IdChanging(System.Nullable<int> value);
    partial void OnPreviousTest_IdChanged();
    partial void OnOneQuestionnaireChanging(bool value);
    partial void OnOneQuestionnaireChanged();
    partial void OnClimateScale_IdChanging(System.Nullable<int> value);
    partial void OnClimateScale_IdChanged();
    partial void OnResultBasedOn100Changing(bool value);
    partial void OnResultBasedOn100Changed();
    partial void OnFinishedChanging(bool value);
    partial void OnFinishedChanged();
    #endregion
		
		public Test()
		{
			this._GraphicDetails = new EntitySet<GraphicDetail>(new Action<GraphicDetail>(this.attach_GraphicDetails), new Action<GraphicDetail>(this.detach_GraphicDetails));
			this._DemographicSelectorDetails = new EntitySet<DemographicSelectorDetail>(new Action<DemographicSelectorDetail>(this.attach_DemographicSelectorDetails), new Action<DemographicSelectorDetail>(this.detach_DemographicSelectorDetails));
			this._Weighings = new EntitySet<Weighing>(new Action<Weighing>(this.attach_Weighings), new Action<Weighing>(this.detach_Weighings));
			this._Evaluations = new EntitySet<Evaluation>(new Action<Evaluation>(this.attach_Evaluations), new Action<Evaluation>(this.detach_Evaluations));
			this._DemographicsInTests = new EntitySet<DemographicsInTest>(new Action<DemographicsInTest>(this.attach_DemographicsInTests), new Action<DemographicsInTest>(this.detach_DemographicsInTests));
			this._Tests = new EntitySet<Test>(new Action<Test>(this.attach_Tests), new Action<Test>(this.detach_Tests));
			this._ExecutiveReports = new EntitySet<ExecutiveReport>(new Action<ExecutiveReport>(this.attach_ExecutiveReports), new Action<ExecutiveReport>(this.detach_ExecutiveReports));
			this._ClimateScale = default(EntityRef<ClimateScale>);
			this._Company = default(EntityRef<Company>);
			this._ConfidenceLevel = default(EntityRef<ConfidenceLevel>);
			this._Questionnaire = default(EntityRef<Questionnaire>);
			this._StandardError = default(EntityRef<StandardError>);
			this._PreviousTest = default(EntityRef<Test>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvaluationNumber", DbType="Int NOT NULL")]
		public int EvaluationNumber
		{
			get
			{
				return this._EvaluationNumber;
			}
			set
			{
				if ((this._EvaluationNumber != value))
				{
					this.OnEvaluationNumberChanging(value);
					this.SendPropertyChanging();
					this._EvaluationNumber = value;
					this.SendPropertyChanged("EvaluationNumber");
					this.OnEvaluationNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Id", DbType="Int NOT NULL")]
		public int User_Id
		{
			get
			{
				return this._User_Id;
			}
			set
			{
				if ((this._User_Id != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_IdChanging(value);
					this.SendPropertyChanging();
					this._User_Id = value;
					this.SendPropertyChanged("User_Id");
					this.OnUser_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Questionnaire_Id", DbType="Int")]
		public System.Nullable<int> Questionnaire_Id
		{
			get
			{
				return this._Questionnaire_Id;
			}
			set
			{
				if ((this._Questionnaire_Id != value))
				{
					if (this._Questionnaire.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionnaire_IdChanging(value);
					this.SendPropertyChanging();
					this._Questionnaire_Id = value;
					this.SendPropertyChanged("Questionnaire_Id");
					this.OnQuestionnaire_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Company_Id", DbType="Int NOT NULL")]
		public int Company_Id
		{
			get
			{
				return this._Company_Id;
			}
			set
			{
				if ((this._Company_Id != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompany_IdChanging(value);
					this.SendPropertyChanging();
					this._Company_Id = value;
					this.SendPropertyChanged("Company_Id");
					this.OnCompany_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvaluationsLefts", DbType="Int NOT NULL")]
		public int EvaluationsLefts
		{
			get
			{
				return this._EvaluationsLefts;
			}
			set
			{
				if ((this._EvaluationsLefts != value))
				{
					this.OnEvaluationsLeftsChanging(value);
					this.SendPropertyChanging();
					this._EvaluationsLefts = value;
					this.SendPropertyChanged("EvaluationsLefts");
					this.OnEvaluationsLeftsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentEvaluations", DbType="Int NOT NULL")]
		public int CurrentEvaluations
		{
			get
			{
				return this._CurrentEvaluations;
			}
			set
			{
				if ((this._CurrentEvaluations != value))
				{
					this.OnCurrentEvaluationsChanging(value);
					this.SendPropertyChanging();
					this._CurrentEvaluations = value;
					this.SendPropertyChanged("CurrentEvaluations");
					this.OnCurrentEvaluationsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupByCategories", DbType="Bit NOT NULL")]
		public bool GroupByCategories
		{
			get
			{
				return this._GroupByCategories;
			}
			set
			{
				if ((this._GroupByCategories != value))
				{
					this.OnGroupByCategoriesChanging(value);
					this.SendPropertyChanging();
					this._GroupByCategories = value;
					this.SendPropertyChanged("GroupByCategories");
					this.OnGroupByCategoriesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordsPerPage", DbType="Int NOT NULL")]
		public int RecordsPerPage
		{
			get
			{
				return this._RecordsPerPage;
			}
			set
			{
				if ((this._RecordsPerPage != value))
				{
					this.OnRecordsPerPageChanging(value);
					this.SendPropertyChanging();
					this._RecordsPerPage = value;
					this.SendPropertyChanged("RecordsPerPage");
					this.OnRecordsPerPageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinimumPeople", DbType="Int NOT NULL")]
		public int MinimumPeople
		{
			get
			{
				return this._MinimumPeople;
			}
			set
			{
				if ((this._MinimumPeople != value))
				{
					this.OnMinimumPeopleChanging(value);
					this.SendPropertyChanging();
					this._MinimumPeople = value;
					this.SendPropertyChanged("MinimumPeople");
					this.OnMinimumPeopleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Disordered", DbType="Bit NOT NULL")]
		public bool Disordered
		{
			get
			{
				return this._Disordered;
			}
			set
			{
				if ((this._Disordered != value))
				{
					this.OnDisorderedChanging(value);
					this.SendPropertyChanging();
					this._Disordered = value;
					this.SendPropertyChanged("Disordered");
					this.OnDisorderedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weighted", DbType="Bit NOT NULL")]
		public bool Weighted
		{
			get
			{
				return this._Weighted;
			}
			set
			{
				if ((this._Weighted != value))
				{
					this.OnWeightedChanging(value);
					this.SendPropertyChanging();
					this._Weighted = value;
					this.SendPropertyChanged("Weighted");
					this.OnWeightedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConfidenceLevel_Id", DbType="Int")]
		public System.Nullable<int> ConfidenceLevel_Id
		{
			get
			{
				return this._ConfidenceLevel_Id;
			}
			set
			{
				if ((this._ConfidenceLevel_Id != value))
				{
					if (this._ConfidenceLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConfidenceLevel_IdChanging(value);
					this.SendPropertyChanging();
					this._ConfidenceLevel_Id = value;
					this.SendPropertyChanged("ConfidenceLevel_Id");
					this.OnConfidenceLevel_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StandardError_Id", DbType="Int")]
		public System.Nullable<int> StandardError_Id
		{
			get
			{
				return this._StandardError_Id;
			}
			set
			{
				if ((this._StandardError_Id != value))
				{
					if (this._StandardError.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStandardError_IdChanging(value);
					this.SendPropertyChanging();
					this._StandardError_Id = value;
					this.SendPropertyChanged("StandardError_Id");
					this.OnStandardError_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfEmployees", DbType="Int")]
		public System.Nullable<int> NumberOfEmployees
		{
			get
			{
				return this._NumberOfEmployees;
			}
			set
			{
				if ((this._NumberOfEmployees != value))
				{
					this.OnNumberOfEmployeesChanging(value);
					this.SendPropertyChanging();
					this._NumberOfEmployees = value;
					this.SendPropertyChanged("NumberOfEmployees");
					this.OnNumberOfEmployeesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreviousTest_Text", DbType="VarChar(MAX)")]
		public string PreviousTest_Text
		{
			get
			{
				return this._PreviousTest_Text;
			}
			set
			{
				if ((this._PreviousTest_Text != value))
				{
					this.OnPreviousTest_TextChanging(value);
					this.SendPropertyChanging();
					this._PreviousTest_Text = value;
					this.SendPropertyChanged("PreviousTest_Text");
					this.OnPreviousTest_TextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreviousTest_Id", DbType="Int")]
		public System.Nullable<int> PreviousTest_Id
		{
			get
			{
				return this._PreviousTest_Id;
			}
			set
			{
				if ((this._PreviousTest_Id != value))
				{
					if (this._PreviousTest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPreviousTest_IdChanging(value);
					this.SendPropertyChanging();
					this._PreviousTest_Id = value;
					this.SendPropertyChanged("PreviousTest_Id");
					this.OnPreviousTest_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OneQuestionnaire", DbType="Bit NOT NULL")]
		public bool OneQuestionnaire
		{
			get
			{
				return this._OneQuestionnaire;
			}
			set
			{
				if ((this._OneQuestionnaire != value))
				{
					this.OnOneQuestionnaireChanging(value);
					this.SendPropertyChanging();
					this._OneQuestionnaire = value;
					this.SendPropertyChanged("OneQuestionnaire");
					this.OnOneQuestionnaireChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClimateScale_Id", DbType="Int")]
		public System.Nullable<int> ClimateScale_Id
		{
			get
			{
				return this._ClimateScale_Id;
			}
			set
			{
				if ((this._ClimateScale_Id != value))
				{
					if (this._ClimateScale.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClimateScale_IdChanging(value);
					this.SendPropertyChanging();
					this._ClimateScale_Id = value;
					this.SendPropertyChanged("ClimateScale_Id");
					this.OnClimateScale_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResultBasedOn100", DbType="Bit NOT NULL")]
		public bool ResultBasedOn100
		{
			get
			{
				return this._ResultBasedOn100;
			}
			set
			{
				if ((this._ResultBasedOn100 != value))
				{
					this.OnResultBasedOn100Changing(value);
					this.SendPropertyChanging();
					this._ResultBasedOn100 = value;
					this.SendPropertyChanged("ResultBasedOn100");
					this.OnResultBasedOn100Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Finished", DbType="Bit NOT NULL")]
		public bool Finished
		{
			get
			{
				return this._Finished;
			}
			set
			{
				if ((this._Finished != value))
				{
					this.OnFinishedChanging(value);
					this.SendPropertyChanging();
					this._Finished = value;
					this.SendPropertyChanged("Finished");
					this.OnFinishedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_GraphicDetail", Storage="_GraphicDetails", ThisKey="Id", OtherKey="Test_Id")]
		public EntitySet<GraphicDetail> GraphicDetails
		{
			get
			{
				return this._GraphicDetails;
			}
			set
			{
				this._GraphicDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_DemographicSelectorDetail", Storage="_DemographicSelectorDetails", ThisKey="Id", OtherKey="Test_Id")]
		public EntitySet<DemographicSelectorDetail> DemographicSelectorDetails
		{
			get
			{
				return this._DemographicSelectorDetails;
			}
			set
			{
				this._DemographicSelectorDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_Weighing", Storage="_Weighings", ThisKey="Id", OtherKey="Test_Id")]
		public EntitySet<Weighing> Weighings
		{
			get
			{
				return this._Weighings;
			}
			set
			{
				this._Weighings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_Evaluation", Storage="_Evaluations", ThisKey="Id", OtherKey="Test_Id")]
		public EntitySet<Evaluation> Evaluations
		{
			get
			{
				return this._Evaluations;
			}
			set
			{
				this._Evaluations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_DemographicsInTest", Storage="_DemographicsInTests", ThisKey="Id", OtherKey="Test_Id")]
		public EntitySet<DemographicsInTest> DemographicsInTests
		{
			get
			{
				return this._DemographicsInTests;
			}
			set
			{
				this._DemographicsInTests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_Test", Storage="_Tests", ThisKey="Id", OtherKey="PreviousTest_Id")]
		public EntitySet<Test> Tests
		{
			get
			{
				return this._Tests;
			}
			set
			{
				this._Tests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_ExecutiveReport", Storage="_ExecutiveReports", ThisKey="Id", OtherKey="Test_Id")]
		public EntitySet<ExecutiveReport> ExecutiveReports
		{
			get
			{
				return this._ExecutiveReports;
			}
			set
			{
				this._ExecutiveReports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClimateScale_Test", Storage="_ClimateScale", ThisKey="ClimateScale_Id", OtherKey="Id", IsForeignKey=true)]
		public ClimateScale ClimateScale
		{
			get
			{
				return this._ClimateScale.Entity;
			}
			set
			{
				ClimateScale previousValue = this._ClimateScale.Entity;
				if (((previousValue != value) 
							|| (this._ClimateScale.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClimateScale.Entity = null;
						previousValue.Tests.Remove(this);
					}
					this._ClimateScale.Entity = value;
					if ((value != null))
					{
						value.Tests.Add(this);
						this._ClimateScale_Id = value.Id;
					}
					else
					{
						this._ClimateScale_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("ClimateScale");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Test", Storage="_Company", ThisKey="Company_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Tests.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Tests.Add(this);
						this._Company_Id = value.Id;
					}
					else
					{
						this._Company_Id = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ConfidenceLevel_Test", Storage="_ConfidenceLevel", ThisKey="ConfidenceLevel_Id", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public ConfidenceLevel ConfidenceLevel
		{
			get
			{
				return this._ConfidenceLevel.Entity;
			}
			set
			{
				ConfidenceLevel previousValue = this._ConfidenceLevel.Entity;
				if (((previousValue != value) 
							|| (this._ConfidenceLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ConfidenceLevel.Entity = null;
						previousValue.Tests.Remove(this);
					}
					this._ConfidenceLevel.Entity = value;
					if ((value != null))
					{
						value.Tests.Add(this);
						this._ConfidenceLevel_Id = value.Id;
					}
					else
					{
						this._ConfidenceLevel_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("ConfidenceLevel");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Questionnaire_Test", Storage="_Questionnaire", ThisKey="Questionnaire_Id", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Questionnaire Questionnaire
		{
			get
			{
				return this._Questionnaire.Entity;
			}
			set
			{
				Questionnaire previousValue = this._Questionnaire.Entity;
				if (((previousValue != value) 
							|| (this._Questionnaire.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Questionnaire.Entity = null;
						previousValue.Tests.Remove(this);
					}
					this._Questionnaire.Entity = value;
					if ((value != null))
					{
						value.Tests.Add(this);
						this._Questionnaire_Id = value.Id;
					}
					else
					{
						this._Questionnaire_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Questionnaire");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StandardError_Test", Storage="_StandardError", ThisKey="StandardError_Id", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public StandardError StandardError
		{
			get
			{
				return this._StandardError.Entity;
			}
			set
			{
				StandardError previousValue = this._StandardError.Entity;
				if (((previousValue != value) 
							|| (this._StandardError.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StandardError.Entity = null;
						previousValue.Tests.Remove(this);
					}
					this._StandardError.Entity = value;
					if ((value != null))
					{
						value.Tests.Add(this);
						this._StandardError_Id = value.Id;
					}
					else
					{
						this._StandardError_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("StandardError");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_Test", Storage="_PreviousTest", ThisKey="PreviousTest_Id", OtherKey="Id", IsForeignKey=true)]
		public Test PreviousTest
		{
			get
			{
				return this._PreviousTest.Entity;
			}
			set
			{
				Test previousValue = this._PreviousTest.Entity;
				if (((previousValue != value) 
							|| (this._PreviousTest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PreviousTest.Entity = null;
						previousValue.Tests.Remove(this);
					}
					this._PreviousTest.Entity = value;
					if ((value != null))
					{
						value.Tests.Add(this);
						this._PreviousTest_Id = value.Id;
					}
					else
					{
						this._PreviousTest_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("PreviousTest");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Test", Storage="_User", ThisKey="User_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Tests.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Tests.Add(this);
						this._User_Id = value.Id;
					}
					else
					{
						this._User_Id = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GraphicDetails(GraphicDetail entity)
		{
			this.SendPropertyChanging();
			entity.Test = this;
		}
		
		private void detach_GraphicDetails(GraphicDetail entity)
		{
			this.SendPropertyChanging();
			entity.Test = null;
		}
		
		private void attach_DemographicSelectorDetails(DemographicSelectorDetail entity)
		{
			this.SendPropertyChanging();
			entity.Test = this;
		}
		
		private void detach_DemographicSelectorDetails(DemographicSelectorDetail entity)
		{
			this.SendPropertyChanging();
			entity.Test = null;
		}
		
		private void attach_Weighings(Weighing entity)
		{
			this.SendPropertyChanging();
			entity.Test = this;
		}
		
		private void detach_Weighings(Weighing entity)
		{
			this.SendPropertyChanging();
			entity.Test = null;
		}
		
		private void attach_Evaluations(Evaluation entity)
		{
			this.SendPropertyChanging();
			entity.Test = this;
		}
		
		private void detach_Evaluations(Evaluation entity)
		{
			this.SendPropertyChanging();
			entity.Test = null;
		}
		
		private void attach_DemographicsInTests(DemographicsInTest entity)
		{
			this.SendPropertyChanging();
			entity.Test = this;
		}
		
		private void detach_DemographicsInTests(DemographicsInTest entity)
		{
			this.SendPropertyChanging();
			entity.Test = null;
		}
		
		private void attach_Tests(Test entity)
		{
			this.SendPropertyChanging();
			entity.PreviousTest = this;
		}
		
		private void detach_Tests(Test entity)
		{
			this.SendPropertyChanging();
			entity.PreviousTest = null;
		}
		
		private void attach_ExecutiveReports(ExecutiveReport entity)
		{
			this.SendPropertyChanging();
			entity.Test = this;
		}
		
		private void detach_ExecutiveReports(ExecutiveReport entity)
		{
			this.SendPropertyChanging();
			entity.Test = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExecutiveReports")]
	public partial class ExecutiveReport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _Date;
		
		private int _Test_Id;
		
		private int _Role_Id;
		
		private System.Nullable<int> _Country_Id;
		
		private System.Nullable<int> _State_Id;
		
		private System.Nullable<int> _Region_Id;
		
		private decimal _SatisfiedCountPercentage;
		
		private decimal _GeneralClimate;
		
		private string _ColourByClimate;
		
		private string _DemographicsWhereThereIsAssociation;
		
		private string _Ubication;
		
		private EntitySet<ER_AnswersByFOType> _ER_AnswersByFOTypes;
		
		private EntitySet<ER_StepwiseValue> _ER_StepwiseValues;
		
		private EntitySet<ER_AnswersByPositionLevel> _ER_AnswersByPositionLevels;
		
		private EntitySet<ER_CategoriesSatEmployee> _ER_CategoriesSatEmployees;
		
		private EntitySet<ER_ClimateByBranch> _ER_ClimateByBranches;
		
		private EntitySet<ER_ClimateByCategory> _ER_ClimateByCategories;
		
		private EntitySet<ER_GeneralSatEmployee> _ER_GeneralSatEmployees;
		
		private EntitySet<ER_LocationsSatEmployee> _ER_LocationsSatEmployees;
		
		private EntityRef<Country> _Country;
		
		private EntityRef<Region> _Region;
		
		private EntityRef<Role> _Role;
		
		private EntityRef<State> _State;
		
		private EntityRef<Test> _Test;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnTest_IdChanging(int value);
    partial void OnTest_IdChanged();
    partial void OnRole_IdChanging(int value);
    partial void OnRole_IdChanged();
    partial void OnCountry_IdChanging(System.Nullable<int> value);
    partial void OnCountry_IdChanged();
    partial void OnState_IdChanging(System.Nullable<int> value);
    partial void OnState_IdChanged();
    partial void OnRegion_IdChanging(System.Nullable<int> value);
    partial void OnRegion_IdChanged();
    partial void OnSatisfiedCountPercentageChanging(decimal value);
    partial void OnSatisfiedCountPercentageChanged();
    partial void OnGeneralClimateChanging(decimal value);
    partial void OnGeneralClimateChanged();
    partial void OnColourByClimateChanging(string value);
    partial void OnColourByClimateChanged();
    partial void OnDemographicsWhereThereIsAssociationChanging(string value);
    partial void OnDemographicsWhereThereIsAssociationChanged();
    partial void OnUbicationChanging(string value);
    partial void OnUbicationChanged();
    #endregion
		
		public ExecutiveReport()
		{
			this._ER_AnswersByFOTypes = new EntitySet<ER_AnswersByFOType>(new Action<ER_AnswersByFOType>(this.attach_ER_AnswersByFOTypes), new Action<ER_AnswersByFOType>(this.detach_ER_AnswersByFOTypes));
			this._ER_StepwiseValues = new EntitySet<ER_StepwiseValue>(new Action<ER_StepwiseValue>(this.attach_ER_StepwiseValues), new Action<ER_StepwiseValue>(this.detach_ER_StepwiseValues));
			this._ER_AnswersByPositionLevels = new EntitySet<ER_AnswersByPositionLevel>(new Action<ER_AnswersByPositionLevel>(this.attach_ER_AnswersByPositionLevels), new Action<ER_AnswersByPositionLevel>(this.detach_ER_AnswersByPositionLevels));
			this._ER_CategoriesSatEmployees = new EntitySet<ER_CategoriesSatEmployee>(new Action<ER_CategoriesSatEmployee>(this.attach_ER_CategoriesSatEmployees), new Action<ER_CategoriesSatEmployee>(this.detach_ER_CategoriesSatEmployees));
			this._ER_ClimateByBranches = new EntitySet<ER_ClimateByBranch>(new Action<ER_ClimateByBranch>(this.attach_ER_ClimateByBranches), new Action<ER_ClimateByBranch>(this.detach_ER_ClimateByBranches));
			this._ER_ClimateByCategories = new EntitySet<ER_ClimateByCategory>(new Action<ER_ClimateByCategory>(this.attach_ER_ClimateByCategories), new Action<ER_ClimateByCategory>(this.detach_ER_ClimateByCategories));
			this._ER_GeneralSatEmployees = new EntitySet<ER_GeneralSatEmployee>(new Action<ER_GeneralSatEmployee>(this.attach_ER_GeneralSatEmployees), new Action<ER_GeneralSatEmployee>(this.detach_ER_GeneralSatEmployees));
			this._ER_LocationsSatEmployees = new EntitySet<ER_LocationsSatEmployee>(new Action<ER_LocationsSatEmployee>(this.attach_ER_LocationsSatEmployees), new Action<ER_LocationsSatEmployee>(this.detach_ER_LocationsSatEmployees));
			this._Country = default(EntityRef<Country>);
			this._Region = default(EntityRef<Region>);
			this._Role = default(EntityRef<Role>);
			this._State = default(EntityRef<State>);
			this._Test = default(EntityRef<Test>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Test_Id", DbType="Int NOT NULL")]
		public int Test_Id
		{
			get
			{
				return this._Test_Id;
			}
			set
			{
				if ((this._Test_Id != value))
				{
					if (this._Test.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTest_IdChanging(value);
					this.SendPropertyChanging();
					this._Test_Id = value;
					this.SendPropertyChanged("Test_Id");
					this.OnTest_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role_Id", DbType="Int NOT NULL")]
		public int Role_Id
		{
			get
			{
				return this._Role_Id;
			}
			set
			{
				if ((this._Role_Id != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRole_IdChanging(value);
					this.SendPropertyChanging();
					this._Role_Id = value;
					this.SendPropertyChanged("Role_Id");
					this.OnRole_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country_Id", DbType="Int")]
		public System.Nullable<int> Country_Id
		{
			get
			{
				return this._Country_Id;
			}
			set
			{
				if ((this._Country_Id != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountry_IdChanging(value);
					this.SendPropertyChanging();
					this._Country_Id = value;
					this.SendPropertyChanged("Country_Id");
					this.OnCountry_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State_Id", DbType="Int")]
		public System.Nullable<int> State_Id
		{
			get
			{
				return this._State_Id;
			}
			set
			{
				if ((this._State_Id != value))
				{
					if (this._State.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnState_IdChanging(value);
					this.SendPropertyChanging();
					this._State_Id = value;
					this.SendPropertyChanged("State_Id");
					this.OnState_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Region_Id", DbType="Int")]
		public System.Nullable<int> Region_Id
		{
			get
			{
				return this._Region_Id;
			}
			set
			{
				if ((this._Region_Id != value))
				{
					if (this._Region.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegion_IdChanging(value);
					this.SendPropertyChanging();
					this._Region_Id = value;
					this.SendPropertyChanged("Region_Id");
					this.OnRegion_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SatisfiedCountPercentage", DbType="Decimal(18,3) NOT NULL")]
		public decimal SatisfiedCountPercentage
		{
			get
			{
				return this._SatisfiedCountPercentage;
			}
			set
			{
				if ((this._SatisfiedCountPercentage != value))
				{
					this.OnSatisfiedCountPercentageChanging(value);
					this.SendPropertyChanging();
					this._SatisfiedCountPercentage = value;
					this.SendPropertyChanged("SatisfiedCountPercentage");
					this.OnSatisfiedCountPercentageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneralClimate", DbType="Decimal(18,3) NOT NULL")]
		public decimal GeneralClimate
		{
			get
			{
				return this._GeneralClimate;
			}
			set
			{
				if ((this._GeneralClimate != value))
				{
					this.OnGeneralClimateChanging(value);
					this.SendPropertyChanging();
					this._GeneralClimate = value;
					this.SendPropertyChanged("GeneralClimate");
					this.OnGeneralClimateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColourByClimate", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string ColourByClimate
		{
			get
			{
				return this._ColourByClimate;
			}
			set
			{
				if ((this._ColourByClimate != value))
				{
					this.OnColourByClimateChanging(value);
					this.SendPropertyChanging();
					this._ColourByClimate = value;
					this.SendPropertyChanged("ColourByClimate");
					this.OnColourByClimateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DemographicsWhereThereIsAssociation", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string DemographicsWhereThereIsAssociation
		{
			get
			{
				return this._DemographicsWhereThereIsAssociation;
			}
			set
			{
				if ((this._DemographicsWhereThereIsAssociation != value))
				{
					this.OnDemographicsWhereThereIsAssociationChanging(value);
					this.SendPropertyChanging();
					this._DemographicsWhereThereIsAssociation = value;
					this.SendPropertyChanged("DemographicsWhereThereIsAssociation");
					this.OnDemographicsWhereThereIsAssociationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ubication", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Ubication
		{
			get
			{
				return this._Ubication;
			}
			set
			{
				if ((this._Ubication != value))
				{
					this.OnUbicationChanging(value);
					this.SendPropertyChanging();
					this._Ubication = value;
					this.SendPropertyChanged("Ubication");
					this.OnUbicationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExecutiveReport_ER_AnswersByFOType", Storage="_ER_AnswersByFOTypes", ThisKey="Id", OtherKey="ExecutiveReport_Id")]
		public EntitySet<ER_AnswersByFOType> ER_AnswersByFOTypes
		{
			get
			{
				return this._ER_AnswersByFOTypes;
			}
			set
			{
				this._ER_AnswersByFOTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExecutiveReport_ER_StepwiseValue", Storage="_ER_StepwiseValues", ThisKey="Id", OtherKey="ExecutiveReport_Id")]
		public EntitySet<ER_StepwiseValue> ER_StepwiseValues
		{
			get
			{
				return this._ER_StepwiseValues;
			}
			set
			{
				this._ER_StepwiseValues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExecutiveReport_ER_AnswersByPositionLevel", Storage="_ER_AnswersByPositionLevels", ThisKey="Id", OtherKey="ExecutiveReport_Id")]
		public EntitySet<ER_AnswersByPositionLevel> ER_AnswersByPositionLevels
		{
			get
			{
				return this._ER_AnswersByPositionLevels;
			}
			set
			{
				this._ER_AnswersByPositionLevels.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExecutiveReport_ER_CategoriesSatEmployee", Storage="_ER_CategoriesSatEmployees", ThisKey="Id", OtherKey="ExecutiveReport_Id")]
		public EntitySet<ER_CategoriesSatEmployee> ER_CategoriesSatEmployees
		{
			get
			{
				return this._ER_CategoriesSatEmployees;
			}
			set
			{
				this._ER_CategoriesSatEmployees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExecutiveReport_ER_ClimateByBranch", Storage="_ER_ClimateByBranches", ThisKey="Id", OtherKey="ExecutiveReport_Id")]
		public EntitySet<ER_ClimateByBranch> ER_ClimateByBranches
		{
			get
			{
				return this._ER_ClimateByBranches;
			}
			set
			{
				this._ER_ClimateByBranches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExecutiveReport_ER_ClimateByCategory", Storage="_ER_ClimateByCategories", ThisKey="Id", OtherKey="ExecutiveReport_Id")]
		public EntitySet<ER_ClimateByCategory> ER_ClimateByCategories
		{
			get
			{
				return this._ER_ClimateByCategories;
			}
			set
			{
				this._ER_ClimateByCategories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExecutiveReport_ER_GeneralSatEmployee", Storage="_ER_GeneralSatEmployees", ThisKey="Id", OtherKey="ExecutiveReport_Id")]
		public EntitySet<ER_GeneralSatEmployee> ER_GeneralSatEmployees
		{
			get
			{
				return this._ER_GeneralSatEmployees;
			}
			set
			{
				this._ER_GeneralSatEmployees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExecutiveReport_ER_LocationsSatEmployee", Storage="_ER_LocationsSatEmployees", ThisKey="Id", OtherKey="ExecutiveReport_Id")]
		public EntitySet<ER_LocationsSatEmployee> ER_LocationsSatEmployees
		{
			get
			{
				return this._ER_LocationsSatEmployees;
			}
			set
			{
				this._ER_LocationsSatEmployees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_ExecutiveReport", Storage="_Country", ThisKey="Country_Id", OtherKey="Id", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.ExecutiveReports.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.ExecutiveReports.Add(this);
						this._Country_Id = value.Id;
					}
					else
					{
						this._Country_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_ExecutiveReport", Storage="_Region", ThisKey="Region_Id", OtherKey="Id", IsForeignKey=true)]
		public Region Region
		{
			get
			{
				return this._Region.Entity;
			}
			set
			{
				Region previousValue = this._Region.Entity;
				if (((previousValue != value) 
							|| (this._Region.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Region.Entity = null;
						previousValue.ExecutiveReports.Remove(this);
					}
					this._Region.Entity = value;
					if ((value != null))
					{
						value.ExecutiveReports.Add(this);
						this._Region_Id = value.Id;
					}
					else
					{
						this._Region_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Region");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_ExecutiveReport", Storage="_Role", ThisKey="Role_Id", OtherKey="Id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.ExecutiveReports.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.ExecutiveReports.Add(this);
						this._Role_Id = value.Id;
					}
					else
					{
						this._Role_Id = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_ExecutiveReport", Storage="_State", ThisKey="State_Id", OtherKey="Id", IsForeignKey=true)]
		public State State
		{
			get
			{
				return this._State.Entity;
			}
			set
			{
				State previousValue = this._State.Entity;
				if (((previousValue != value) 
							|| (this._State.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._State.Entity = null;
						previousValue.ExecutiveReports.Remove(this);
					}
					this._State.Entity = value;
					if ((value != null))
					{
						value.ExecutiveReports.Add(this);
						this._State_Id = value.Id;
					}
					else
					{
						this._State_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("State");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_ExecutiveReport", Storage="_Test", ThisKey="Test_Id", OtherKey="Id", IsForeignKey=true)]
		public Test Test
		{
			get
			{
				return this._Test.Entity;
			}
			set
			{
				Test previousValue = this._Test.Entity;
				if (((previousValue != value) 
							|| (this._Test.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Test.Entity = null;
						previousValue.ExecutiveReports.Remove(this);
					}
					this._Test.Entity = value;
					if ((value != null))
					{
						value.ExecutiveReports.Add(this);
						this._Test_Id = value.Id;
					}
					else
					{
						this._Test_Id = default(int);
					}
					this.SendPropertyChanged("Test");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ER_AnswersByFOTypes(ER_AnswersByFOType entity)
		{
			this.SendPropertyChanging();
			entity.ExecutiveReport = this;
		}
		
		private void detach_ER_AnswersByFOTypes(ER_AnswersByFOType entity)
		{
			this.SendPropertyChanging();
			entity.ExecutiveReport = null;
		}
		
		private void attach_ER_StepwiseValues(ER_StepwiseValue entity)
		{
			this.SendPropertyChanging();
			entity.ExecutiveReport = this;
		}
		
		private void detach_ER_StepwiseValues(ER_StepwiseValue entity)
		{
			this.SendPropertyChanging();
			entity.ExecutiveReport = null;
		}
		
		private void attach_ER_AnswersByPositionLevels(ER_AnswersByPositionLevel entity)
		{
			this.SendPropertyChanging();
			entity.ExecutiveReport = this;
		}
		
		private void detach_ER_AnswersByPositionLevels(ER_AnswersByPositionLevel entity)
		{
			this.SendPropertyChanging();
			entity.ExecutiveReport = null;
		}
		
		private void attach_ER_CategoriesSatEmployees(ER_CategoriesSatEmployee entity)
		{
			this.SendPropertyChanging();
			entity.ExecutiveReport = this;
		}
		
		private void detach_ER_CategoriesSatEmployees(ER_CategoriesSatEmployee entity)
		{
			this.SendPropertyChanging();
			entity.ExecutiveReport = null;
		}
		
		private void attach_ER_ClimateByBranches(ER_ClimateByBranch entity)
		{
			this.SendPropertyChanging();
			entity.ExecutiveReport = this;
		}
		
		private void detach_ER_ClimateByBranches(ER_ClimateByBranch entity)
		{
			this.SendPropertyChanging();
			entity.ExecutiveReport = null;
		}
		
		private void attach_ER_ClimateByCategories(ER_ClimateByCategory entity)
		{
			this.SendPropertyChanging();
			entity.ExecutiveReport = this;
		}
		
		private void detach_ER_ClimateByCategories(ER_ClimateByCategory entity)
		{
			this.SendPropertyChanging();
			entity.ExecutiveReport = null;
		}
		
		private void attach_ER_GeneralSatEmployees(ER_GeneralSatEmployee entity)
		{
			this.SendPropertyChanging();
			entity.ExecutiveReport = this;
		}
		
		private void detach_ER_GeneralSatEmployees(ER_GeneralSatEmployee entity)
		{
			this.SendPropertyChanging();
			entity.ExecutiveReport = null;
		}
		
		private void attach_ER_LocationsSatEmployees(ER_LocationsSatEmployee entity)
		{
			this.SendPropertyChanging();
			entity.ExecutiveReport = this;
		}
		
		private void detach_ER_LocationsSatEmployees(ER_LocationsSatEmployee entity)
		{
			this.SendPropertyChanging();
			entity.ExecutiveReport = null;
		}
	}
}
#pragma warning restore 1591
